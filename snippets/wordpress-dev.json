{
	"WordPress | Comments Plugin Header": {
		"prefix": "wpapuh",
		"body": [
			"/**",
			" * Plugin Name: ${1:Plugin Name}",
			" * Plugin URI:  ${3:plugin-url}",
			" * Description: ${4:Plugin Description}.",
			" * Version:     ${5:Plugin Version}",
			" * Author:      ${6:Author Name}",
			" * Author URI:  ${7:Author URL}",
			" * Text Domain: ${10:Plugin Slug}",
			" * Domain Path: /languages",
			" * License:     GPL-2.0+",
			" * License URI: http://www.gnu.org/licenses/gpl-2.0.txt",
			" *",
			" * @package     ${2:PluginName}",
			" * @author      ${6:Author Name}",
			" * @copyright   ${8:Year} ${9:Company}",
			" * @license     GPL-2.0+",
			" *",
			" * @wordpress-plugin",
			" *",
			" * Prefix:      ${11:Plugin Functions Prefix}",
			" */",
			"",
			"defined( 'ABSPATH' ) || die( 'No script kiddies please!' );",
			"",
			"define( '${11:PREFIX}_VERSION', '${2:version}' );",
			"define( '${11:PREFIX}_PLUGIN', __FILE__ );",
			"define( '${11:PREFIX}_PLUGIN_URL', plugin_dir_url( __FILE__ ) );",
			"define( '${11:PREFIX}_PLUGIN_PATH', plugin_dir_path( __FILE__ ) );",
			"",
			"add_action( 'plugins_loaded', '${11:Plugin Functions Prefix}_plugin_init' );",
			"/**",
			" * Load localization files",
			" *",
			" * @return void",
			" */",
			"function ${11:Plugin Functions Prefix}_plugin_init() {",
			"\tload_plugin_textdomain( '${10:Plugin Slug}', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );",
			"}"
		]
	},
	"WordPress Define default constants for Plugin": {
		"prefix": "wpadef",
		"body": [
		  "define( '${1:PREFIX}_VERSION', '${2:version}' );",
		  "define( '${1:PREFIX}_PLUGIN', __FILE__ );",
		  "define( '${1:PREFIX}_PLUGIN_URL', plugin_dir_url( __FILE__ ) );",
		  "define( '${1:PREFIX}_PLUGIN_PATH', plugin_dir_path( __FILE__ ) );"
		],
		"description": "WordPress Define default constants for Plugin"
	},
	"Wordpress | Comments Plugin File Header": {
		"prefix": "wpahfil",
		"body": [
			"/**",
			" * ${1:name-file}",
			" *",
			" * ${2:description}",
			" *",
			" * @author   ${3:author}",
			" * @category ${4:category}",
			" * @package  ${5:package}",
			" * @version  ${6:version}",
			" */"
		]
	},
	"Comments - New section": {
		"prefix": "coasec",
		"body": [
			"/**",
			" * # $1",
			" * ---------------------------------------------------------------------------------------------------- */"
		]
	},
	"Comments - New subsection": {
		"prefix": "coassec",
		"body": [
			"/**",
			" * ## $1",
			" * --------------------------- */"
		]
	},
	"WordPress | Configuration for Local development": {
		"prefix": "wpaloc",
		"body": [
		  "define( 'DB_NAME', '${1:database}' );",
		  "define( 'DB_USER', 'root' );",
		  "define( 'DB_PASSWORD', 'root' );",
		  "define( 'WP_HOME', 'http://${2:url}.local/' );",
		  "define( 'WP_SITEURL', 'http://${2:url}.local/' );",
		  "define( 'DB_HOST', 'localhost' );",
		  "",
		  "define( 'FS_METHOD','direct' );",
		  "define( 'WP_DEBUG', true );",
		  "define( 'WP_ENVIRONMENT_TYPE', 'local' ); // production, staging, test",
		  "define( 'WP_POST_REVISIONS', 10 );",
		  "",
		  "define( 'DB_CHARSET', 'utf8' );",
		  "define( 'DB_COLLATE', '' );",
		  "define( 'DISALLOW_FILE_EDIT', true );",
		  "",
		  "define( 'AUTH_KEY',         '' );",
		  "define( 'SECURE_AUTH_KEY',  '' );",
		  "define( 'LOGGED_IN_KEY',    '' );",
		  "define( 'NONCE_KEY',        '' );",
		  "define( 'AUTH_SALT',        '' );",
		  "define( 'SECURE_AUTH_SALT', '' );",
		  "define( 'LOGGED_IN_SALT',   '' );",
		  "define( 'NONCE_SALT',       '' );",
		  "",
		  "//Use for Cookies https://api.wordpress.org/secret-key/1.1/salt/",
		  "",
		  "\\$table_prefix  = '${3:db_prefix}_';",
		  "",
		  "define('WPLANG', 'es_ES' );",
		  "",
		  "if ( !defined('ABSPATH') )",
		  "\tdefine( 'ABSPATH', dirname(__FILE__) . '/' );",
		  "",
		  "require_once( ABSPATH . 'wp-settings.php' );"
		]
	},
	"WordPress | Removes CSS and JS for optimization": {
		"prefix": "wpaop",
		"body": [
			"/**",
			" * # Optimization",
			" * ---------------------------------------------------------------------------------------------------- */",
			"add_action( 'wp_enqueue_scripts', 'remove_default_stylesheet_js', 20 );",
			"/**",
			" * Removes and deregister styles and scripts from plugins",
			" *",
			" * @return void",
			" */",
			"function remove_default_stylesheet_js() {",
			"\twp_deregister_style( 'wpmenucart-fontawesome' );",
			"\twp_dequeue_style( 'wpmenucart-icons' );",
			"\twp_dequeue_style( 'taxonomy-image-plugin-public' );",
			"}"
		]
	},
	"WordPress | Adds Google Tag Manager from Plugin Duracell": {
		"prefix": "wpatag",
		"body": [
			"add_action( 'wp_body_open', '${1:prefix}_tag_manager' );",
			"/**",
			" * Adds Tag manager to body tag",
			" *",
			" * @return void",
			" */",
			"function ${1:prefix}_tag_manager() {",
			"\tif ( function_exists( 'gtm4wp_the_gtm_tag' ) ) {",
			"\t\tgtm4wp_the_gtm_tag();",
			"\t}",
			"}"
		],
		"description": "Closemarketing | AÃ±ade Tag Manager en Genesis"
	},
	"PHP | Echo a variable": {
		"prefix": "phpec",
		"body":"<?php echo \\$${1:var}; ?>"
	},

	"PHP | Echo variable with wrap PRE": {
		"prefix": "phpep",
		"body": [
			"echo '<pre style=\"margin-left:200px;\">${1:var}:';",
			"print_r( ${1:var} );",
			"echo '</pre>';"
		]
	},

	"PHP | Echo variable with Printr": {
		"prefix": "phper",
		"body": [
			"echo '${1:var}:';",
			"print_r( ${1:var} );"
		]
	},
	"WordPress | Error log": {
		"prefix": "phpel",
		"body": [
		  "error_log( '${1:variable}: ' . print_r( ${1:variable}, true ) );"
		],
		"description": "WordPress | Error log"
	},
	"PHP | Adds Class": {
		"prefix": "phpacl",
		"body": [
			"/**",
			" * ${1:Summary}.",
			" *",
			" * ${2:Description}.",
			" *",
			" * @since ${3:Version 3 digits}",
			" */",
			"class ${4:Class Name} {",
			"",
			"\t/**",
			"\t * Construct of Class",
			"\t */",
			"\tpublic function __construct() {",
			"\t}",
			"",
			"\t/**",
			"\t * # Functions",
			"\t * ---------------------------------------------------------------------------------------------------- */",
			"}",
			"",
			"new ${4:Class Name}();"
		],
		"description": "PHP | Adds Class"
	},
	"PHP | DocBlocks file header": {
		"prefix": "phpah",
		"body": [
			"/**",
			" * ${1:Summary}.",
			" *",
			" * ${2:Description}.",
			" *",
			" * @link ${3:URL}",
			" *",
			" * @package WordPress",
			" * @subpackage Component",
			" * @since ${4:Version}",
			" */",
			"",
			"defined( 'ABSPATH' ) || exit;",
			""
		],
		"description": "PHP | Component file header"
	},
	"PHP | DocBlocks for Classes": {
		"prefix": "phpache",
		"body": [
			"/**",
			" * ${1:Summary}.",
			" *",
			" * ${2:Description}.",
			" *",
			" * @since ${3:Version 3 digits}",
			" */"
		],
		"description": "PHP | DocBlocks for Classes"
	},
	"PHP | Create variable with isset verification": {
		"prefix": "phpavi",
		"body": [
		  "$${1:name_variable} = isset( ${2:test_variable} ) ? ${2:test_variable} : '';"
		],
		"description": "PHP | Create variable with isset verification"
	},

	"Developer | Loads a Composer Library": {
		"prefix": "devtcomp",
		"body": [
			"/* Load Composer Dependency Libraries */",
			"require plugin_dir_path( __FILE__) . 'vendor/autoload.php';"
		]
	},
	"WordPress | Loads Plugin Text Domain": {
		"prefix": "wpalpt",
		"body": [
			"// Loads translation.",
			"load_plugin_textdomain( '${1:text-domain}', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );"
		],
		"description": "WordPress | Loads Plugin Text Domain"
	},
	"WordPress | Doc Header comment": {
		"prefix": "wpadhc",
		"body": [
		  "/**",
		  " * ${1:Short Description}",
		  " *",
		  " * @package    ${3:packace-name}",
		  " * @author     ${4:example} <${5:email}>",
		  " * @copyright  ${6:year} ${7:Company}",
		  " * @version    ${8:Version}",
		  " */",
		  "",
		  "defined( 'ABSPATH' ) || exit;"
		],
		"description": "PHP | Doc Header comment"
	},
	"WordPress | Function comment":{
		"prefix": "wpafc",
		"body": [
			"/**",
			" * ${1:Function Short Description}",
			" *",
			" * ${2:Function Long Description}",
			" *",
			" * @param ${3:Type} $${4:var} ${5:Description}",
			" * @return ${6:type}",
			" * @throws ${7:conditon}",
			" **/",
			" ${8:public} function ${9:FunctionName}( ${3:Type} $${4:var} = ${10:null} ) {",
			" \t# code...",
			"}"
		],
		"description": "PHP | Function comment"
	},
	"WordPress | Foces automatic updates in WordPress": {
		"prefix": "wpaupd",
		"body": [
			"/**",
			" * Force Automatic updates in WordPress",
			" */",
			"add_filter( 'auto_update_core', '__return_true' );",
			"add_filter( 'auto_update_plugin', '__return_true' );",
			"add_filter( 'auto_update_theme', '__return_true' );",
			"add_filter( 'auto_update_translation', '__return_true' );",
			"add_filter( 'auto_core_update_send_email', '__return_true' );"
		],
		"description": "WordPress | Foces automatic updates in WordPress"
	},
	"WordPress | Adds jQuery wrap": {
		"prefix": "wpajs",
		"body": [
		  "<script>",
		  "    (function (\\$) {",
		  "",
		  "    }(jQuery));",
		  "</script>"
		],
		"description": "WordPress | Adds jQuery wrap"
	},
	"WordPress | Create a Shortcode": {
		"prefix": "wpssh",
		"body": [
			"add_shortcode( '${1:shorcode_name}', '${1:shorcode_name}_shortcode' );",
			"/**",
			" * Shortocode",
			" *",
			" * @param array  \\$atts Attributes of shortcode.",
			" * @param string \\$content Content for shortode.",
			" * @return html",
			" */",
			"function ${1:shorcode_name}_shortcode( \\$atts, \\$content = null ) {",
			"",
			"\t\\$att = shortcode_atts(",
			"\t\tarray(",
			"\t\t\t'att1' => 'value_default1',",
			"\t\t\t'att2' => 'value_default2',",
			"\t\t),",
			"\t\t\\$atts",
			"\t);",
			"",
			"\t\\$html = '';",
			"\t\\$att1 = esc_attr( \\$att['att1'] );",
			"",
			"\treturn \\$html;",
			"}"
		],
		"description": "WordPress | Create a Shortcode"
	},
	"WordPress | Shows favicon from theme directory ": {
		"prefix": "wpsfav",
		"body": [
		  "add_action( 'wp_head', '${1:prefix}_add_my_favicon' );",
		  "add_action( 'admin_head', '${1:prefix}_add_my_favicon' );",
		  "/**",
		  " * Adds favicon to WordPress",
		  " *",
		  " * @return void",
		  " */",
		  "function ${1:prefix}_add_my_favicon() {",
		  "\techo '<link rel=\"shortcut icon\" href=\"' . esc_url( get_stylesheet_directory_uri() ) . '/images/favicon.png\" >';",
		  "}"
		],
		"description": "WordPress | Shows favicon from theme directory "
	},
	"WordPress | Disables Post format for the theme": {
		"prefix": "wprpf",
		"body": [
			"// Disables Post Format for the theme.",
			"remove_theme_support( 'post-formats' );"
		],
		"description": "WordPress | Disables Post format for the theme"
	},
	"WordPress | Replace already registered post type": {
		"prefix": "wptre",
		"body": [
		  "add_filter( 'register_post_type_args', '${1:prefix}_change_post_types_slug', 10, 2 );",
		  "/**",
		  " * Replace already registered post type slug",
		  " *",
		  " * @param array  $args Arguments of post type.",
		  " * @param string $post_type Post type.",
		  " * @return $args",
		  " */",
		  "function ${1:prefix}_change_post_types_slug( $args, $post_type ) {",
		  "\t// * Item post type slug",
		  "\tif ( '${2:name-post-type}' === $post_type ) {",
		  "\t\t$args['rewrite']['slug'] = '${4:slug-post-type}';",
		  "\t}",
		  "\treturn $args;",
		  "}"
		],
		"description": "WordPress | Replace already registered post type"
	},
	"WordPress | API Get function": {
		"prefix": "wpgfu",
		"body": [
			"\\$args     = array(",
			"\t'headers' => array(",
			"\t\t'key' => '',",
			"\t),",
			");",
			"\\$response = wp_remote_get( '${1:api_url}', \\$args );",
			"if ( 200 === \\$response['response']['code'] ) {",
			"\t\\$body = wp_remote_retrieve_body( \\$response );",
			"\treturn \\$body;",
			"} else {",
			"\treturn false;",
			"}"
		],
		"description": "WordPress | API Get function"
	},
	"WordPress | Register additional menu": {
		"prefix": "wpamen",
		"body": [
		  "add_action( 'init', '${1:prefix}_register_additional_menu' );",
		  "/**",
		  " * Adds additional menu for ${2:menu-slug}",
		  " *",
		  " * @return void",
		  " */",
		  "function ${1:prefix}_register_additional_menu() {",
		  "\tregister_nav_menu( '${2:menu-slug}', '${3:menu-label}' );",
		  "}"
		],
		"description": "WordPress | Register additional menu"
	},
	"WordPress | Adds recurrence interval for Cron": {
		"prefix": "wpacr",
		"body": [
			"add_filter( 'cron_schedules', '${1:prefix}_add_cron_recurrence_interval' );",
			"/**",
			" * Adds a cron Schedule",
			" *",
			" * @param array \\$schedules Array of Schedules.",
			" * @return array \\$schedules",
			" */",
			"function ${1:prefix}_add_cron_recurrence_interval( \\$schedules ) {",
			" ",
			"\t\\$schedules['every_fifteen_minutes'] = array(",
			"\t\t'interval' => 900,",
			"\t\t'display'  => __( 'Every 3 Minutes', 'textdomain' ),",
			"\t);",
			"",
			"\treturn \\$schedules;",
			"}"
		],
		"description": "WordPress | Adds recurrence interval for Cron"
	},
	"WordPress | Plugin require files": {
		"prefix": "wpaprq",
		"body": [
		  "// Include files.",
		  "require_once plugin_dir_path( __FILE__ ) . '/${1:folder}/${2:file}.php';"
		],
		"description": "WordPress | Plugin require files"
	},
	"WordPress | Get environment": {
		"prefix": "wpagt",
		"body": [
		  "if ( function_exists( 'wp_get_environment_type' ) && 'local' === wp_get_environment_type() ) {",
		  "\t// Values: local, development, staging and production",
		  "\t",
		  "}"
		],
		"description": "WordPress | Get environment"
	},
	"WordPress | Set environment config": {
		"prefix": "wptgt",
		"body": [
		  "define( 'WP_ENVIRONMENT_TYPE', '${1:local}' ); // Values: local, development, staging and production"
		],
		"description": "WordPress | Set environment config"
	},
	"WordPress | Customize login page": {
		"prefix": "wptlog",
		"body": [
		  "remove_action( 'login_head', 'cmk_custom_login_logo' );",
		  "add_action( 'login_head', '${1:prefix}_custom_login_logo' );",
		  "/**",
		  " * Customize login page.",
		  " *",
		  " * @return void",
		  " */",
		  "function ${1:prefix}_custom_login_logo() {",
		  "\techo '<style type=\"text/css\">",
		  "\th1 a { width: 330px !important; background-image:url(' . get_stylesheet_directory_uri() . '/images/logo.png) !important; background-size: 310px !important; }",
		  "\tp.galogin-powered {display: none;}",
		  "\tbody.login {background: ${2:background-color}; }",
		  "\t.login form { border: 2px solid ${3:color-contrast}; }",
		  "\t.login label {color: ${3:color-contrast};}",
		  "\tinput[type=\"checkbox\"]:focus, input[type=\"color\"]:focus, input[type=\"date\"]:focus, input[type=\"datetime-local\"]:focus, input[type=\"datetime\"]:focus, input[type=\"email\"]:focus, input[type=\"month\"]:focus, input[type=\"number\"]:focus, input[type=\"password\"]:focus, input[type=\"radio\"]:focus, input[type=\"search\"]:focus, input[type=\"tel\"]:focus, input[type=\"text\"]:focus, input[type=\"time\"]:focus, input[type=\"url\"]:focus, input[type=\"week\"]:focus, select:focus, textarea:focus { border-color: ${3:color-contrast}; }",
		  "\t.wp-core-ui .button-primary {background-color: ${3:color-contrast}; box-shadow: none; text-shadow: none; border: none;}",
		  "\t.wp-core-ui .button-primary.focus, .wp-core-ui .button-primary.hover, .wp-core-ui .button-primary:focus, .wp-core-ui .button-primary:hover {  background-color: ${3:color-contrast}; border-color: none; }",
		  "\t.login #backtoblog a, .login #nav a, .login a { color: ${3:color-contrast}; }",
		  "\t.login #backtoblog a:hover, .login #nav a:hover { color: ${3:color-contrast}; }",
		  "\t</style>';",
		  "}"
		],
		"description": "WordPress | Customize login page"
	},

	"WordPress | Adds functions to Custom Post Type": {
		"prefix": "wpafpt",
		"body": [
			"/**",
			" * # Page ${2:post_type}",
			" * ---------------------------------------------------------------------------------------------------- */",
			"add_action( 'get_header', '${1:prefix}load_${2:post_type}_page' );",
			"/**",
			" * Loads functions in custom post type for ${2:post_type}",
			" *",
			" * @return void",
			" */",
			"function ${1:prefix}load_${2:post_type}_page() {",
			"\tif ( is_singular( '${2:post_type}' ) ) {",
			"\t\t// Custom actions.",
			"\t}",
			"}"
		]
	},
	"WordPress | Enqueue Style in Plugin": {
		"prefix": "wpaes",
		"body": [
		  "wp_enqueue_style( '${1:slug-name}', plugins_url( '/assets/${2:filename}.css', __FILE__ ), array(), ${3:version} );"
		],
		"description": "WordPress | Enqueue Style in Plugin"
	},
	"WordPress | Enqueue Javascript in Plugin": {
		"prefix": "wpaej",
		"body": [
			  "add_action( 'wp_enqueue_scripts', '${1:prefix}scripts' );",
			  "/**",
			  " * Loads Scripts",
			  " *",
			  " * @return void",
			  " */",
			  "function ${1:prefix}scripts() {",
			  "\twp_register_script(",
			  "\t\t'${2:slug-name}',",
			  "\t\tplugins_url( '/includes/js/${2:slug-name}.js', __FILE__ ),",
			  "\t\tarray( 'jquery' ),",
			  "\t\t${3:version},",
			  "\t\ttrue",
			  "\t);",
			  "wp_enqueue_script( '${2:slug-name}' );",
			  "}"
			],
	
		"description": "WordPress | Enqueue Javascript in Plugin"
	},
	"WordPress | Enqueue Javascript in Child Theme": {
		"prefix": "wpaejt",
		"body": [
			  "add_action( 'wp_enqueue_scripts', '${1:prefix}scripts' );",
			  "/**",
			  " * Loads Scripts",
			  " *",
			  " * @return void",
			  " */",
			  "function ${1:prefix}scripts() {",
			  "\twp_register_script(",
			  "\t\t'${2:slug-name}',",
			  "\t\tget_stylesheet_directory_uri() . '/js/${2:slug-name}.js',",
			  "\t\tarray( 'jquery' ),",
			  "\t\t'${3:version}',",
			  "\t\ttrue",
			  "\t);",
			  "\twp_enqueue_script( '${2:slug-name}' );",
			  "}"
			],
	
		"description": "WordPress | Enqueue Javascript in Theme Child"
	},
	"WordPress | Create AJAX button": {
		"prefix": "wpajx",
		"body": [
			"// In construct Class",
			"add_action( 'admin_enqueue_scripts', array( \\$this, 'scripts_${1:name_ajax}' ) );",
			"add_action( 'wp_ajax_${1:name_ajax}', array( \\$this, '${1:name_ajax}' ) );",
			"add_action( 'wp_ajax_nopriv_${1:name_ajax}', array( \\$this, '${1:name_ajax}' ) );",
			"",
			"",
			"public function scripts_${1:name_ajax}() {",
			"",
			"\twp_enqueue_script( ",
			"\t\t'${2:name-action}',",
			"\t\tPLUGIN_URL . 'includes/js/${2:name-action}.js',",
			"\t\tarray(),",
			"\t\tPLUGIN_VERSION,",
			"\t\ttrue",
			"\t);",
			"",
			"\twp_localize_script(",
			"\t\t'${2:name-action}',",
			"\t\t'ajaxAction',",
			"\t\tarray(",
			"\t\t\t'url'   => admin_url( 'admin-ajax.php' ),",
			"\t\t\t'nonce' => wp_create_nonce( '${1:name_ajax}_nonce' ),",
			"\t\t)",
			"\t);",
			"",
			"\twp_register_style( '${2:name-action}', plugins_url( 'css/${2:name-action}.css', __FILE__ ), false, '1.0.0', 'all' );",
			"\twp_enqueue_style( '${2:name-action}' );",
			"}",
			"",
			"function button_${1:name_ajax}(){",
			"\t?>",
			"\t<div class=\"${2:name-action}-action\">",
			"\t\t<input id=\"${1:name_ajax}\" name=\"${1:name_ajax}\" type=\"button\" class=\"button button-large button-primary\" value=\"Button Text\" data-post-id=\"<?php echo get_the_ID(); ?>\" />",
			"\t\t<span class=\"spinner\"></span>",
			"\t\t<div id=\"${2:name-action}-result\"></div>",
			"\t</div>",
			"\t<?php",
			"}",
			"/**",
			" * Ajax function to load info",
			" *",
			" * @return void",
			" */",
			"public function ${1:name_ajax}() {",
			"\t\\$post_id = isset( \\$_POST['post_id'] ) ? esc_attr( \\$_POST['post_id'] ) : '';",
			"\t\\$nonce   = isset( \\$_POST['nonce'] ) ? esc_attr( \\$_POST['nonce'] ) : '';",
			"",
			"\tcheck_ajax_referer( '${1:name_ajax}_nonce', 'nonce' );",
			"\tif ( true ) {",
			"\t\t\\$html = '';",
			"\t\twp_send_json_success( \\$html );",
			"\t} else {",
			"\t\twp_send_json_error( array( 'error' => 'Error' ) );",
			"\t}",
			"}",
			"",
			"// in JS",
			"document.getElementById('${2:name-action}').addEventListener('click', function(e) {",
			"\t// AJAX request.",
			"\tfetch( ajaxAction.url, {",
			"\t\tmethod: 'POST',",
			"\t\tcredentials: 'same-origin',",
			"\t\theaders: {",
			"\t\t\t'Content-Type': 'application/x-www-form-urlencoded',",
			"\t\t\t'Cache-Control': 'no-cache',",
			"\t\t},",
			"\t\tbody: 'action=${1:name_ajax}&nonce=' + ajaxAction.nonce + '&post_id=' + document.getElementById('${2:name-action}').getAttribute('data-post-id'),",
			"\t})",
			"\t.then( response => {",
			"\t\t//RESPONSE",
			"\t})",
			"\t.catch(err => console.log(err));"
		],
		"description": "WordPress | Create AJAX button"
	},
	"WordPress | Create AJAX button with jQuery": {
		"prefix": "wpajxq",
		"body": [
			"// In construct Class",
			"add_action( 'admin_enqueue_scripts', array( \\$this, 'scripts_${1:name_ajax}' ) );",
			"add_action( 'wp_ajax_${1:name_ajax}', array( \\$this, '${1:name_ajax}' ) );",
			"add_action( 'wp_ajax_nopriv_${1:name_ajax}', array( \\$this, '${1:name_ajax}' ) );",
			"",
			"",
			"public function scripts_${1:name_ajax}() {",
			"",
			"\twp_enqueue_script( ",
			"\t\t'${2:name-action}',",
			"\t\tplugins_url( '/js/${2:name-action}.js', __FILE__ ),",
			"\t\tarray( 'jquery' ),",
			"\t\ttrue",
			"\t);",
			"",
			"\twp_localize_script(",
			"\t\t'${2:name-action}',",
			"\t\t'ajaxAction',",
			"\t\tarray(",
			"\t\t\t'url'   => admin_url( 'admin-ajax.php' ),",
			"\t\t\t'nonce' => wp_create_nonce( '${1:name_ajax}_nonce' ),",
			"\t\t)",
			"\t);",
			"",
			"\twp_register_style( '${2:name-action}', plugins_url( 'css/${2:name-action}.css', __FILE__ ), false, '1.0.0', 'all' );",
			"\twp_enqueue_style( '${2:name-action}' );",
			"}",
			"",
			"function button_${1:name_ajax}(){",
			"\t?>",
			"\t<div class=\"${2:name-action}-action\">",
			"\t\t<input id=\"${1:name_ajax}\" name=\"${1:name_ajax}\" type=\"button\" class=\"button button-large button-primary\" value=\"Button Text\" data-post-id=\"<?php echo get_the_ID(); ?>\" />",
			"\t\t<span class=\"spinner\"></span>",
			"\t\t<div id=\"${2:name-action}-result\"></div>",
			"\t</div>",
			"\t<?php",
			"}",
			"/**",
			" * Ajax function to load info",
			" *",
			" * @return void",
			" */",
			"public function ${1:name_ajax}() {",
			"\t\\$post_id = isset( \\$_POST['post_id'] ) ? esc_attr( \\$_POST['post_id'] ) : '';",
			"\t\\$nonce   = isset( \\$_POST['nonce'] ) ? esc_attr( \\$_POST['nonce'] ) : '';",
			"",
			"\tcheck_ajax_referer( '${1:name_ajax}_nonce', 'nonce' );",
			"\tif ( true ) {",
			"\t\t\\$html = '';",
			"\t\twp_send_json_success( \\$html );",
			"\t} else {",
			"\t\twp_send_json_error( array( 'error' => 'Error' ) );",
			"\t}",
			"}",
			"",
			"// in JS",
			"jQuery(document).ready(function(\\$) {",
			"",
			"\t\\$('#${2:name-action}').click(function(e) {",
			"\t\te.preventDefault();",
			"\t\t",
			"\t\t\\$.ajax({",
			"\t\t\ttype: 'POST',",
			"\t\t\turl: ajaxAction.url,",
			"\t\t\tdata: {",
			"\t\t\t\taction: '${1:name_ajax}',",
			"\t\t\t\tpost_id: $('#${1:name_ajax}').attr(\"data-post-id\"),",
			"\t\t\t\tnonce: ajaxAction.nonce",
			"\t\t\t},",
			"\t\t\tbeforeSend: function() { \\$(\".${2:name-action}-action .spinner\").addClass(\"is-active\"); },",
			"\t\t\tcomplete: function() { \\$(\".${2:name-action}-action .spinner\").removeClass(\"is-active\"); },",
			"\t\t\tsuccess: function(response){",
			"\t\t\t\t\\$('#${2:name-action}-result').html( response.data );",
			"\t\t\t},",
			"\t\t\terror: function(xhr, textStatus, error) {",
			"\t\t\t\tconsole.log(xhr.statusText);",
			"\t\t\t\tconsole.log(textStatus);",
			"\t\t\t\tconsole.log(error);",
			"\t\t\t}",
			"\t\t});",
			"\t});",
			"",
			"});",
		],
		"description": "WordPress | Create AJAX button with jQuery"
	},
	"WordPress | Send email with headers": {
		"prefix": "wpasm",
		"body": [
		  "\\$subject = __( '', '${1:text-domain}' );",
		  "\\$headers = array( 'Content-Type: text/html; charset=UTF-8' );",
		  "\\$body    = '<br/><strong>' . __( '', '${1:text-domain}' ) . '</strong> ';",
		  "\\$body   .= '<br/><strong>' . __( '', '${1:text-domain}' ) . '</strong> ';",
		  "\\$body   .= date_i18n( 'Y-m-d H:i:s', current_time( 'timestamp') );",
		  "wp_mail( get_option( 'admin_email' ), \\$subject, \\$body, \\$headers );"
		],
		"description": "WordPress | Send email with headers"
	},
	"WordPress | Create transient": {
		"prefix": "wpatra",
		"body": [
			"\\$${2:variable} = get_transient( '${1:prefix}query_${2:variable}' );",
			"if ( ! \\$${2:variable} ) {",
			"\t// Generate value for ${2:variable}.",
			"\t\\$${2:variable} = '';",
			"\tset_transient( '${1:prefix}query_${2:variable}', \\$${2:variable}, HOUR_IN_SECONDS * 3 );",
			"}"
		],
		"description": "WordPress | Create transient"
	},
	"WordPress | Disable comments for custom post types": {
		"prefix": "wptco",
		"body": [
		  "add_filter( 'comments_open', '${1:prefix}comments_open', 10 , 2 );",
		  "/**",
		  " * Disable comments for custom post types",
		  " *",
		  " * @param boolean \\$open Status of comment.",
		  " * @param integer \\$post_id Post ID.",
		  " * @return boolean",
		  " */",
		  "function ${1:prefix}comments_open( \\$open, \\$post_id ) {",
		  "\t\\$post_type = get_post_type( \\$post_id );",
		  "\t// allow comments for built-in post post type.",
		  "\tif ( 'post' === \\$post_type ) {",
		  "\t\treturn true;",
		  "\t}",
		  "\t// disable comments for any other post types.",
		  "\treturn false;",
		  "}"
		],
		"description": "WordPress | Disable comments for custom post types"
	},
	    "WordPress DB | Get Results from table": {
		"prefix": "wpdbget",
		"body": [
		  "global \\$wpdb;",
		  "\\$rows = \\$wpdb->get_results( \"SELECT * FROM \" . \\$wpdb->base_prefix . \"${1:table} WHERE ${2:variable} = '${3:value}';\" );",
		  "if ( \\$wpdb->last_error ) {",
		  "\techo 'Error: ' . esc_html( \\$wpdb->last_error );",
		  "}",
		  "foreach ( \\$rows as \\$row ) {",
		  "}"
		],
		"description": "WordPress DB | Get Results from table"
	    },
	    "WordPress | Routine update metas with categories": {
		"prefix": "wprout",
		"body": [
		  "/*",
		  "** Routine in WordPress to update metas of a post type",
		  "*/",
		  "define( 'WP_USE_THEMES', false );",
		  "require_once( 'wp-load.php' );",
		  "",
		  "/**",
		  " * Finds product categories ids from array of names given",
		  " *",
		  " * @param array \\$taxonomy_names Array of names.",
		  " * @return string IDS of categories.",
		  " */",
		  "function find_categories_ids( \\$taxonomy_names, \\$taxonomy ) {",
		  "\t\\$level    = 0;",
		  "\t\\$cats_ids = array();",
		  "",
		  "\tforeach ( \\$taxonomy_names as \\$taxonomy_name ) {",
		  "\t\t\\$cat_slug     = sanitize_title( \\$taxonomy_name );",
		  "\t\t\\$taxonomy_obj = get_term_by( 'slug', \\$cat_slug, \\$taxonomy );",
		  "\t\tif ( \\$taxonomy_obj ) {",
		  "\t\t\t// Finds the category.",
		  "\t\t\t\\$cats_ids[ \\$level ] = \\$taxonomy_obj->term_id;",
		  "\t\t} else {",
		  "\t\t\t\\$parent_prod_id = 0;",
		  "\t\t\tif ( \\$level > 0 ) {",
		  "\t\t\t\t\\$parent_prod_id = \\$cats_ids[ \\$level-1 ];",
		  "\t\t\t}",
		  "\t\t\t// Creates the category.",
		  "\t\t\t\\$term = wp_insert_term(",
		  "\t\t\t\t\\$taxonomy_name,",
		  "\t\t\t\t\\$taxonomy,",
		  "\t\t\t\tarray(",
		  "\t\t\t\t\t'slug'   => \\$cat_slug,",
		  "\t\t\t\t\t'parent' => \\$parent_prod_id,",
		  "\t\t\t\t)",
		  "\t\t\t);",
		  "\t\t\tif ( ! is_wp_error( \\$term ) ) {",
		  "\t\t\t\t\\$cats_ids[ \\$level ] = \\$term['term_id'];",
		  "\t\t\t}",
		  "\t\t}",
		  "\t\t\\$level++;",
		  "\t}",
		  "",
		  "\treturn \\$cats_ids;",
		  "}",
		  "echo 'Process Started<br />';",
		  "",
		  "\\$posts_${1:postype} = get_posts('posts_per_page=-1&post_type=${1:postype}&fields=ids');",
		  "if ( ! empty( \\$posts_${1:postype} ) ) {",
		  "\tforeach ( \\$posts_${1:postype} as \\$post_id ) {",
		  "\t\t// Meta old",
		  "\t\t\\$exp_${2:meta_key} = get_post_meta( \\$post_id, '${2:meta_key}', false );",
		  "",
		  "\t\techo '---<br />';",
		  "\t\techo 'PostID: ' . \\$post_id . '<br/>';",
		  "\t\techo 'Title: ' . get_the_title( \\$post_id ) . '</br>';",
		  "\t\techo '${2:meta_key}: ' . \\$exp_${2:meta_key} . '</br>';",
		  "",
		  "\t\tupdate_post_meta( \\$post_id, '${3:meta_key_new}', \\$exp_${2:meta_key} );",
		  "",
		  "\t\t// Delete old post meta (optional).",
		  "\t\t// delete_post_meta( \\$post_id, '${3:meta_key_new}' );",
		  "",
		  "// Category.",
		  "\t\t\\$cats_ids_term = find_categories_ids( array( \\$cats_names ), 'taxonomy' );",
		  "\t\twp_set_post_terms(",
		  "\t\t\t\\$post_id,",
		  "\t\t\t\\$cats_ids_term,",
		  "\t\t\t'taxonomy'",
		  "\t\t);",
		  "\t}",
		  "}",
		  "echo 'Process finished.<br />';",
		  ""
		],
		"description": "WordPress | Routine update metas with categories"
	    },
	    "WordPress | Create Filter to a Custom Post type based in meta value": {
		"prefix": "wpacptfi",
		"body": [
		  "",
		  "add_action( 'restrict_manage_posts', '${1:prefix}_admin_posts_filter_restrict_manage_posts' );",
		  "/**",
		  " * First create the dropdown",
		  " * make sure to change POST_TYPE to the name of your custom post type",
		  " *",
		  " * @author Ohad Raz",
		  " *",
		  " * @return void",
		  " */",
		  "function ${1:prefix}_admin_posts_filter_restrict_manage_posts() {",
		  "\t\\$type = isset( \\$_GET['post_type'] ) ? \\$_GET['post_type'] : 'post';",
		  "",
		  "\t// only add filter to post type you want",
		  "\tif ( '${2:post_type}' == \\$type ) {",
		  "\t\t// change this to the list of values you want to show",
		  "\t\t// in 'label' => 'value' format",
		  "\t\t// * Get posts in array",
		  "\t\t\\$args_query    = array(",
		  "\t\t\t'post_type'      => '${4:post_type_search}',",
		  "\t\t\t'posts_per_page' => -1,",
		  "\t\t\t'post_parent'    => 0,",
		  "\t\t\t'orderby'        => 'title', // menu_order, rand, date.",
		  "\t\t\t'order'          => 'ASC',",
		  "\t\t);",
		  "\t\t\\$posts_array   = get_posts( \\$args_query );",
		  "\t\t\\$posts_options = array();",
		  "\t\tforeach ( \\$posts_array as \\$post_single ) {",
		  "\t\t\t\\$posts_options[ \\$post_single->ID ] = \\$post_single->post_title;",
		  "\t\t}",
		  "\t\t?>",
		  "\t\t<select name=\"${3:meta_key}\">",
		  "\t\t<option value=\"\"><?php esc_html_e( 'Filter by ${4:post_type_search}', '${5:textdomain}' ); ?></option>",
		  "\t\t<?php",
		  "\t\t\\$current_v = isset( \\$_GET['${3:meta_key}'] ) ? \\$_GET['${3:meta_key}'] : '';",
		  "\t\tforeach ( \\$posts_options as \\$key => \\$value ) {",
		  "\t\t\tprintf(",
		  "\t\t\t\t'<option value=\"%s\"%s>%s</option>',",
		  "\t\t\t\t\\$key,",
		  "\t\t\t\t\\$key == \\$current_v ? ' selected=\"selected\"' : '',",
		  "\t\t\t\t\\$value",
		  "\t\t\t);",
		  "\t\t}",
		  "\t\t?>",
		  "\t\t</select>",
		  "\t\t<?php",
		  "\t}",
		  "}",
		  "",
		  "",
		  "add_filter( 'parse_query', '${1:prefix}_posts_filter' );",
		  "/**",
		  " * if submitted filter by post meta",
		  " *",
		  " * make sure to change META_KEY to the actual meta key",
		  " * and POST_TYPE to the name of your custom post type",
		  " *",
		  " * @author Ohad Raz",
		  " * @param  (wp_query object) \\$query",
		  " *",
		  " * return Void",
		  " */",
		  "function ${1:prefix}_posts_filter( \\$query ) {",
		  "\tglobal \\$pagenow;",
		  "\t\\$type = isset( \\$_GET['post_type'] ) ? \\$_GET['post_type'] : 'post';",
		  "",
		  "\tif ( '${2:post_type}' == \\$type && is_admin() && \\$pagenow == 'edit.php' && isset( \\$_GET['${3:meta_key}'] ) && \\$_GET['${3:meta_key}'] != '' ) {",
		  "\t\t\\$query->query_vars['meta_key']   = '${3:meta_key}';",
		  "\t\t\\$query->query_vars['meta_value'] = \\$_GET['${3:meta_key}'];",
		  "\t}",
		  "}",
		  ""
		],
		"description": "WordPress | Create Filter to a Custom Post type based in meta value"
	},
	"WordPress | Registers metabox for a post type": {
		"prefix": "wpamet",
		"body": [
			"",
			"// Register Meta box for post type ${2:slug_post_type}.",
			"add_action( 'add_meta_boxes', '${1:prefix}metabox_${2:slug_post_type}' );",
			"add_action( 'save_post', '${1:prefix}save_metaboxes_${2:slug_post_type}' );",
			"/**",
			" * Adds metabox",
			" *",
			" * @return void",
			" */",
			"function ${1:prefix}metabox_${2:slug_post_type} () {",
			"\tadd_meta_box(",
			"\t\t'${2:slug_post_type}',",
			"\t\t__( '${10:title}', '${11:textdomain}' ),",
			"\t\t'${1:prefix}metabox_show_${2:slug_post_type}',",
			"\t\t'${2:slug_post_type}',",
			"\t\t'normal'",
			"\t);",
			"}",
			"/**",
			" * Metabox inputs for post type.",
			" *",
			" * @param object \\$post Post object.",
			" * @return void",
			" */",
			"function ${1:prefix}metabox_show_${2:slug_post_type} ( \\$post ) {",
			"\t\\$${2:slug_post_type}_${3:key1} = get_post_meta( \\$post->ID, '${2:slug_post_type}_${3:key1}', true );",
			"\t\\$${2:slug_post_type}_${4:key2} = get_post_meta( \\$post->ID, '${2:slug_post_type}_${4:key2}', true );",
			"\t\\$${2:slug_post_type}_${5:key3} = get_post_meta( \\$post->ID, '${2:slug_post_type}_${5:key3}', true );",
			"\t\\$${2:slug_post_type}_${6:key4} = get_post_meta( \\$post->ID, '${2:slug_post_type}_${6:key4}', true );",
			"\t\\$${2:slug_post_type}_${7:key5} = get_post_meta( \\$post->ID, '${2:slug_post_type}_${7:key5}', true );",
			"\t?>",
			"\t<table>",
			"\t\t<tr><!-- TEXT ${3:key1}-->",
			"\t\t\t<td>",
			"\t\t\t\t<label for=\"${2:slug_post_type}_${3:key1}\"><?php echo esc_html( 'Title ${3:key1}', '${5:textdomain}' ); ?></label>",
			"\t\t\t</td>",
			"\t\t\t<td>",
			"\t\t\t\t<input type=\"text\" name=\"${2:slug_post_type}_${3:key1}\" value=\"<?php echo esc_attr( \\$${2:slug_post_type}_${3:key1} ) ?>\">",
			"\t\t\t</td>",
			"\t\t</tr><!-- //TEXT ${3:key1}-->",
			"\t\t<tr><!-- CHECKBOX ${4:key2}-->",
			"\t\t\t<td>",
			"\t\t\t\t<label for=\"${2:slug_post_type}_${4:key2}\"><?php echo esc_html( 'Title ${4:key2}', '${5:textdomain}' ); ?></label>",
			"\t\t\t</td>",
			"\t\t\t<td>",
			"\t\t\t\t<?php ",
			"\t\t\t\t\\$status = array(",
			"\t\t\t\t\t'yes' => 'SÃ­',",
			"\t\t\t\t\t'no'  => 'No',",
			"\t\t\t\t);",
			"\t\t\t\techo isset( \\$status[ \\$${2:slug_post_type}_${4:key2} ] ) ? esc_html( \\$status[ \\$${2:slug_post_type}_${4:key2} ] ) : '';",
			"\t\t\t\t?>",
			"\t\t\t</td>",
			"\t\t</tr><!-- // CHECKBOX ${4:key2}-->",
			"\t\t<tr><!-- SELECT ${5:key3}-->",
			"\t\t\t<td>",
			"\t\t\t\t<label for=\"${2:slug_post_type}_${5:key3}\"><?php echo esc_html( '', '${11:textdomain}' ); ?></label>",
			"\t\t\t</td>",
			"\t\t\t<td>",
			"\t\t\t\t<select name=\"${2:slug_post_type}_${5:key3}\">",
			"\t\t\t\t<?php",
			"\t\t\t\t\\$options = array(",
			"\t\t\t\t\t'VALUE' => __( 'Label', '' ),",
			"\t\t\t\t);",
			"\t\t\t\tforeach ( \\$options as \\$key => \\$label ) {",
			"\t\t\t\t\techo '<option value=\"' . \\$key . '\" ' . ( \\$${2:slug_post_type}_${5:key3} == $key ? 'selected=\"selected\"' : null ) . '>' . \\$label . '</option>';",
			"\t\t\t\t}",
			"\t\t\t\t?>",
			"\t\t\t\t</select>",
			"\t\t\t</td>",
			"\t\t</tr><!-- //SELECT ${5:key3}-->",
			"\t\t<tr><!-- EMAIL ${6:key4}-->",
			"\t\t\t<td>",
			"\t\t\t\t<label for=\"${2:slug_post_type}_${6:key4}\"><?php echo esc_html( 'Email', '${11:textdomain}' ); ?></label>",
			"\t\t\t</td>",
			"\t\t\t<td>",
			"\t\t\t\t<input type=\"email\" name=\"${2:slug_post_type}_${6:key4}\" value=\"<?php echo esc_attr( \\$${2:slug_post_type}_${6:key4} ) ?>\">",
			"\t\t\t</td>",
			"\t\t</tr><!-- //EMAIL ${6:key4}-->",
			"\t\t<tr><!-- URL web-->",
			"\t\t\t<td>",
			"\t\t\t\t<label for=\"${2:slug_post_type}_${7:key5}\"><?php echo esc_html( 'Web', '${11:textdomain}' ); ?></label>",
			"\t\t\t</td>",
			"\t\t\t<td>",
			"\t\t\t\t<input type=\"url\" name=\"${2:slug_post_type}_${7:key5}\" pattern=\"https://.*\" size=\"30\" value=\"<?php echo esc_attr( \\$${2:slug_post_type}_${7:key5} ) ?>\">",
			"\t\t\t</td>",
			"\t\t</tr>",
			"\t</table>",
			"\t<?php",
			"}",
			"",
			"/**",
			" * Save metaboxes",
			" *",
			" * @param int \\$post_id Post id.",
			" * @return void",
			" */",
			"function ${1:prefix}save_metaboxes_${2:slug_post_type}( \\$post_id ) {",
			"\tif ( isset( \\$_POST['${2:slug_post_type}_${3:key1}'] ) ) {",
			"\t\tupdate_post_meta( \\$post_id, '${2:slug_post_type}_${3:key1}', \\$_POST['${2:slug_post_type}_${3:key1}'] );",
			"\t}",
			"\tif ( isset( \\$_POST['${2:slug_post_type}_${4:key2}'] ) ) {",
			"\t\tupdate_post_meta( \\$post_id, '${2:slug_post_type}_${4:key2}', \\$_POST['${2:slug_post_type}_${4:key2}'] );",
			"\t}",
			"\tif ( isset( \\$_POST['${2:slug_post_type}_${5:key3}'] ) ) {",
			"\t\tupdate_post_meta( \\$post_id, '${2:slug_post_type}_${5:key3}', \\$_POST['${2:slug_post_type}_${5:key3}'] );",
			"\t}",
			"\tif ( isset( \\$_POST['${2:slug_post_type}_${6:key4}'] ) ) {",
			"\t\tupdate_post_meta( \\$post_id, '${2:slug_post_type}_${6:key4}', \\$_POST['${2:slug_post_type}_${6:key4}'] );",
			"\t}",
			"\tif ( isset( \\$_POST['${2:slug_post_type}_${7:key5}'] ) ) {",
			"\t\tupdate_post_meta( \\$post_id, '${2:slug_post_type}_${7:key5}', \\$_POST['${2:slug_post_type}_${7:key5}'] );",
			"\t}",
			"}"
		],
		"description": "WordPress | Registers metabox for a post type"
	},
	"WordPress | Registers meta for a user": {
		"prefix": "wpameu",
		"body": [
		  "",
		  "add_action( 'show_user_profile', '${1:prefix}extra_profile_fields' );",
		  "add_action( 'edit_user_profile', '${1:prefix}extra_profile_fields' );",
		  "",
		  "/**",
		  " * Profile fields for users",
		  " *",
		  " * @param object $user",
		  " * @return void",
		  " */",
		  "function ${1:prefix}extra_profile_fields( \\$user ) {",
		  "",
		  "\t\\$${2:slug_post_type}_${3:key} = get_user_meta( \\$user->ID, '${2:slug_post_type}_${3:key}' );",
		  "\t?>",
		  "",
		  "\t<h3><?php esc_html_e( 'Extra profile information', '${10:textdomain}' ); ?></h3>",
		  "\t<table class=\"form-table\">",
		  "\t\t<tr><!-- SELECT ${3:key}-->",
		  "\t\t\t<th><label for=\"${2:slug_post_type}_${3:key}\"><?php echo esc_html( 'Title ${3:key}', 'textdomain' ); ?></label></th>",
		  "\t\t\t<td>",
		  "\t\t\t\t<select name=\"${2:slug_post_type}_${3:key}\" id=\"${2:slug_post_type}_${3:key}\">",
		  "\t\t\t\t\t<?php",
		  "\t\t\t\t\t\\$options = array(",
		  "\t\t\t\t\t\t'VALUE' => __( 'Label', '' ),",
		  "\t\t\t\t\t);",
		  "\t\t\t\t\tforeach ( \\$options as \\$key => \\$label ) {",
		  "\t\t\t\t\t\techo '<option value=\"' . \\$key . '\" ';",
		  "\t\t\t\t\t\tselected( \\$${2:slug_post_type}_${3:key}, \\$key );",
		  "\t\t\t\t\t\techo '>' . \\$label . '</option>';",
		  "\t\t\t\t\t}",
		  "\t\t\t\t\t?>",
		  "\t\t\t\t</select>",
		  "\t\t\t</td>",
		  "\t\t</tr>",
		  "\t</table>",
		  "\t<?php",
		  "}",
		  "",
		  "add_action( 'personal_options_update', '${1:prefix}save_extra_user_profile_fields' );",
		  "add_action( 'edit_user_profile_update', '${1:prefix}save_extra_user_profile_fields' );",
		  "/**",
		  " * Saves extra fields",
		  " *",
		  " * @param integer $user_id",
		  " * @return void",
		  " */",
		  "function ${1:prefix}save_extra_user_profile_fields( \\$user_id ) {",
		  "",
		  "\tif ( ! current_user_can( 'edit_user', \\$user_id ) ) {",
		  "\t\treturn false;",
		  "\t}",
		  "",
		  "\tupdate_user_meta( \\$user_id, '${2:slug_post_type}_${3:key}', \\$_POST['${2:slug_post_type}_${3:key}'] );",
		  "}",
		  ""
		],
		"description": "WordPress | Registers meta for a user"
	},
	"GravityForms PDF - Set Templates directory to Plugin": {
		"prefix": "gfapdf",
		"body": [
		  "// PDF Location Templates.",
		  "add_filter( 'gfpdf_template_location', function( \\$directory, \\$$working_folder, \\$upload_path ) {",
		  "\t/* Make sure you include the forward slash! */",
		  "\treturn ${1:prefix}_PLUGIN_PATH . 'includes/' . \\$$working_folder . '/';",
		  "}, 10, 3 );",
		  "",
		  "/**",
		  "* You must use the `gfpdf_template_location` filter in conjunction with the `gfpdf_template_location_uri` filter",
		  "* Both filters should point to the same directory (one is the path and one is the URL)",
		  "*/",
		  "add_filter( 'gfpdf_template_location_uri', function( $url, \\$$working_folder, \\$upload_url ) {",
		  "\t/* Make sure you include the forward slash! */",
		  "\treturn ${1:prefix}_PLUGIN_URL . 'includes/' . \\$$working_folder . '/';",
		  "}, 10, 3 );"
		],
		"description": "GravityForms PDF - Set Templates directory to Plugin"
	 },
	 "Removes jQuery from loading": {
		"prefix": "wprjq",
		"body": [
			"add_filter( 'wp_enqueue_scripts', '${1:prefix}remove_default_jquery', PHP_INT_MAX );",
			"/**",
			" * Removes dependency of jQuery",
			" *",
			" * @return void",
			" */",
			"function ${1:prefix}remove_default_jquery() {",
			"\twp_dequeue_script( 'jquery');",
			"\twp_deregister_script( 'jquery');",
			"}"
		],
		"description": "Removes jQuery from loading"
	 }
}