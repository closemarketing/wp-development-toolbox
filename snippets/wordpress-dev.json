{
	"WordPress | Comments Plugin Header": {
		"prefix": "wpapuh",
		"body": [
			"/**",
			" * Plugin Name: ${1:Plugin Name}",
			" * Plugin URI:  ${3:plugin-url}",
			" * Description: ${4:Plugin Description}.",
			" * Version:     ${5:Plugin Version}",
			" * Author:      ${6:Author Name}",
			" * Author URI:  ${7:Author URL}",
			" * Text Domain: ${10:Plugin Slug}",
			" * Domain Path: /languages",
			" * License:     GPL-2.0+",
			" * License URI: http://www.gnu.org/licenses/gpl-2.0.txt",
			" *",
			" * @package     ${2:PluginName}",
			" * @author      ${6:Author Name}",
			" * @copyright   ${8:Year} ${9:Company}",
			" * @license     GPL-2.0+",
			" *",
			" * @wordpress-plugin",
			" *",
			" * Prefix:      ${11:Plugin Functions Prefix}",
			" */",
			"",
			"defined( 'ABSPATH' ) || die( 'No script kiddies please!' );",
			"",
			"add_action( 'plugins_loaded', '${11:Plugin Functions Prefix}_plugin_init' );",
			"/**",
			" * Load localization files",
			" *",
			" * @return void",
			" */",
			"function ${11:Plugin Functions Prefix}_plugin_init() {",
			"\tload_plugin_textdomain( '${10:Plugin Slug}', false, dirname( plugin_basename( __FILE__ ) ) . '/languages' );",
			"}"
		]
	},
	"Wordpress | Comments Plugin File Header": {
		"prefix": "wpahfil",
		"body": [
			"/**",
			" * ${1:name-file}",
			" *",
			" * ${2:description}",
			" *",
			" * @author   ${3:author}",
			" * @category ${4:category}",
			" * @package  ${5:package}",
			" * @version  ${6:version}",
			" */"
		]
	},
	"Comments - New section": {
		"prefix": "coasec",
		"body": [
			"/**",
			" * # $1",
			" * ---------------------------------------------------------------------------------------------------- */"
		]
	},
	"Comments - New subsection": {
		"prefix": "coassec",
		"body": [
			"/**",
			" * ## $1",
			" * --------------------------- */"
		]
	},
	"WordPress | Configuration for Local development": {
		"prefix": "wpaloc",
		"body": [
		  "define( 'DB_NAME', '${1:database}' );",
		  "define( 'DB_USER', 'root' );",
		  "define( 'DB_PASSWORD', 'root' );",
		  "define( 'WP_HOME', 'http://${2:url}.local/' );",
		  "define( 'WP_SITEURL', 'http://${2:url}.local/' );",
		  "define( 'DB_HOST', 'localhost' );",
		  "",
		  "define( 'FS_METHOD','direct' );",
		  "define( 'WP_DEBUG', true );",
		  "define( 'WP_POST_REVISIONS', 3 );",
		  "",
		  "define( 'DB_CHARSET', 'utf8' );",
		  "define( 'DB_COLLATE', '' );",
		  "define( 'DISALLOW_FILE_EDIT', true );",
		  "",
		  "define( 'AUTH_KEY',         '' );",
		  "define( 'SECURE_AUTH_KEY',  '' );",
		  "define( 'LOGGED_IN_KEY',    '' );",
		  "define( 'NONCE_KEY',        '' );",
		  "define( 'AUTH_SALT',        '' );",
		  "define( 'SECURE_AUTH_SALT', '' );",
		  "define( 'LOGGED_IN_SALT',   '' );",
		  "define( 'NONCE_SALT',       '' );",
		  "",
		  "//Use for Cookies https://api.wordpress.org/secret-key/1.1/salt/",
		  "",
		  "\\$table_prefix  = '${3:db_prefix}_';",
		  "",
		  "define('WPLANG', 'es_ES' );",
		  "",
		  "if ( !defined('ABSPATH') )",
		  "\tdefine( 'ABSPATH', dirname(__FILE__) . '/' );",
		  "",
		  "require_once( ABSPATH . 'wp-settings.php' );"
		]
	},
	"WordPress | Removes CSS and JS for optimization": {
		"prefix": "wpaop",
		"body": [
			"/**",
			" * # Optimization",
			" * ---------------------------------------------------------------------------------------------------- */",
			"add_action( 'wp_enqueue_scripts', 'remove_default_stylesheet_js', 20 );",
			"/**",
			" * Removes and deregister styles and scripts from plugins",
			" *",
			" * @return void",
			" */",
			"function remove_default_stylesheet_js() {",
			"\twp_deregister_style( 'wpmenucart-fontawesome' );",
			"\twp_dequeue_style( 'wpmenucart-icons' );",
			"\twp_dequeue_style( 'taxonomy-image-plugin-public' );",
			"}"
		]
	},
	"PHP | Echo a variable": {
		"prefix": "phpec",
		"body":"<?php echo \\$${1:var}; ?>"
	},

	"PHP | Echo variable with wrap PRE": {
		"prefix": "phpep",
		"body": [
			"echo '<pre>';",
			"print_r(\\$${1:var});",
			"echo '</pre>';"
		]
	},
	"PHP | Adds Class": {
		"prefix": "phpacl",
		"body": [
			"/**",
			" * ${1:Summary}.",
			" *",
			" * ${2:Description}.",
			" *",
			" * @since ${3:Version 3 digits}",
			" */",
			"class ${4:Class Name} {",
			"",
			"\t/**",
			"\t * Construct of Class",
			"\t */",
			"\tpublic function __construct() {",
			"\t}",
			"",
			"\t/**",
			"\t * # Functions",
			"\t * ---------------------------------------------------------------------------------------------------- */",
			"}",
			"",
			"new ${4:Class Name};"
		],
		"description": "PHP | Adds Class"
	},
	"PHP | DocBlocks file header": {
		"prefix": "phpah",
		"body": [
			"/**",
			" * ${1:Summary}.",
			" *",
			" * ${2:Description}.",
			" *",
			" * @link ${3:URL}",
			" *",
			" * @package WordPress",
			" * @subpackage Component",
			" * @since ${4:Version}",
			" */",
			"",
			"defined( 'ABSPATH' ) || exit;",
			""
		],
		"description": "PHP | Component file header"
	},
	"PHP | DocBlocks for Classes": {
		"prefix": "phpache",
		"body": [
			"/**",
			" * ${1:Summary}.",
			" *",
			" * ${2:Description}.",
			" *",
			" * @since ${3:Version 3 digits}",
			" */"
		],
		"description": "PHP | DocBlocks for Classes"
	},
	"PHP | Create variable with isset verification": {
		"prefix": "phpavi",
		"body": [
		  "$${1:name_variable} = isset( ${2:test_variable} ) ? ${2:test_variable} : '';"
		],
		"description": "PHP | Create variable with isset verification"
	},

	"Developer | Loads a Composer Library": {
		"prefix": "devtcomp",
		"body": [
			"/* Load Composer Dependency Libraries */",
			"require plugin_dir_path( __FILE__) . 'vendor/autoload.php';"
		]
	},
	"WordPress | Loads Plugin Text Domain": {
		"prefix": "wpalpt",
		"body": [
			"// Loads translation.",
			"load_plugin_textdomain( '${1:text-domain}', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' );"
		],
		"description": "WordPress | Loads Plugin Text Domain"
	},
	"WordPress | Doc Header comment": {
		"prefix": "wpadhc",
		"body": [
		  "/**",
		  " * ${1:Short Description}",
		  " *",
		  " * ${2:Long Description}",
		  " *",
		  " * @package    ${3:packace-name}",
		  " * @author     ${4:example} <${5:email}>",
		  " * @copyright  ${6:year} ${7:Company}",
		  " * @version    ${8:Version}",
		  " */",
		  "",
		  "defined( 'ABSPATH' ) || exit;"
		],
		"description": "PHP | Doc Header comment"
	},
	"WordPress | Function comment":{
		"prefix": "wpafc",
		"body": [
			"/**",
			" * ${1:Function Short Description}",
			" *",
			" * ${2:Function Long Description}",
			" *",
			" * @param ${3:Type} $${4:var} ${5:Description}",
			" * @return ${6:type}",
			" * @throws ${7:conditon}",
			" **/",
			" ${8:public} function ${9:FunctionName}( ${3:Type} $${4:var} = ${10:null} ) {",
			" \t# code...",
			"}"
		],
		"description": "PHP | Function comment"
	},
	"WordPress | Foces automatic updates in WordPress": {
		"prefix": "wpaupd",
		"body": [
			"/**",
			" * Force Automatic updates in WordPress",
			" */",
			"add_filter( 'auto_update_core', '__return_true' );",
			"add_filter( 'auto_update_plugin', '__return_true' );",
			"add_filter( 'auto_update_theme', '__return_true' );",
			"add_filter( 'auto_update_translation', '__return_true' );",
			"add_filter( 'auto_core_update_send_email', '__return_true' );"
		],
		"description": "WordPress | Foces automatic updates in WordPress"
	},
	"WordPress | Adds jQuery wrap": {
		"prefix": "wpajs",
		"body": [
		  "<script>",
		  "    (function (\\$) {",
		  "",
		  "    }(jQuery));",
		  "</script>"
		],
		"description": "WordPress | Adds jQuery wrap"
	},
	"WordPress | Create a Shortcode": {
		"prefix": "wpssh",
		"body": [
			"add_shortcode( '${1:shorcode_name}', '${1:shorcode_name}_shortcode' );",
			"/**",
			" * Shortocode",
			" *",
			" * @param array  \\$atts Attributes of shortcode.",
			" * @param string \\$content Content for shortode.",
			" * @return html",
			" */",
			"function ${1:shorcode_name}_shortcode( \\$atts, \\$content = null ) {",
			"",
			"\t\\$att = shortcode_atts(",
			"\t\tarray(",
			"\t\t\t'att1' => 'value_default1',",
			"\t\t\t'att2' => 'value_default2',",
			"\t\t),",
			"\t\t\\$atts",
			"\t);",
			"",
			"\t\\$html = '';",
			"\t\\$att1 = esc_attr( \\$att['att1'] );",
			"",
			"\treturn \\$html;",
			"}"
		],
		"description": "WordPress | Create a Shortcode"
	},
	"WordPress | Shows favicon from theme directory ": {
		"prefix": "wpsfav",
		"body": [
		  "add_action( 'wp_head', '${1:prefix}_add_my_favicon' );",
		  "add_action( 'admin_head', '${1:prefix}_add_my_favicon' );",
		  "/**",
		  " * Adds favicon to WordPress",
		  " *",
		  " * @return void",
		  " */",
		  "function ${1:prefix}_add_my_favicon() {",
		  "\techo '<link rel=\"shortcut icon\" href=\"' . esc_url( get_stylesheet_directory_uri() ) . '/images/favicon.png\" >';",
		  "}"
		],
		"description": "WordPress | Shows favicon from theme directory "
	},
	"WordPress | Disables Post format for the theme": {
		"prefix": "wprpf",
		"body": [
			"// Disables Post Format for the theme.",
			"remove_theme_support( 'post-formats' );"
		],
		"description": "WordPress | Disables Post format for the theme"
	},
	"WordPress | Replace already registered post type": {
		"prefix": "wptre",
		"body": [
		  "add_filter( 'register_post_type_args', '${1:prefix}_change_post_types_slug', 10, 2 );",
		  "/**",
		  " * Replace already registered post type slug",
		  " *",
		  " * @param array  $args Arguments of post type.",
		  " * @param string $post_type Post type.",
		  " * @return $args",
		  " */",
		  "function ${1:prefix}_change_post_types_slug( $args, $post_type ) {",
		  "\t// * Item post type slug",
		  "\tif ( '${2:name-post-type}' === $post_type ) {",
		  "\t\t$args['rewrite']['slug'] = '${4:slug-post-type}';",
		  "\t}",
		  "\treturn $args;",
		  "}"
		],
		"description": "WordPress | Replace already registered post type"
	},
	"WordPress | API Get function": {
		"prefix": "wpgfu",
		"body": [
			"\\$args     = array(",
			"\t'headers' => array(",
			"\t\t'key' => '',",
			"\t),",
			");",
			"\\$response = wp_remote_get( '${1:api_url}', \\$args );",
			"if ( 200 === \\$response['response']['code'] ) {",
			"\t\\$body = wp_remote_retrieve_body( \\$response );",
			"\treturn \\$body;",
			"} else {",
			"\treturn false;",
			"}"
		],
		"description": "WordPress | API Get function"
	},
	"WordPress | Register additional menu": {
		"prefix": "wpamen",
		"body": [
		  "add_action( 'init', '${1:prefix}_register_additional_menu' );",
		  "/**",
		  " * Adds additional menu for ${2:menu-slug}",
		  " *",
		  " * @return void",
		  " */",
		  "function ${1:prefix}_register_additional_menu() {",
		  "\tregister_nav_menu( '${2:menu-slug}', '${3:menu-label}' );",
		  "}"
		],
		"description": "WordPress | Register additional menu"
	},
	"WordPress | Adds recurrence interval for Cron": {
		"prefix": "wpacr",
		"body": [
			"add_filter( 'cron_schedules', '${1:prefix}_add_cron_recurrence_interval' );",
			"/**",
			" * Adds a cron Schedule",
			" *",
			" * @param array \\$schedules Array of Schedules.",
			" * @return array \\$schedules",
			" */",
			"function ${1:prefix}_add_cron_recurrence_interval( \\$schedules ) {",
			" ",
			"\t\\$schedules['every_fifteen_minutes'] = array(",
			"\t\t'interval' => 900,",
			"\t\t'display'  => __( 'Every 3 Minutes', 'textdomain' ),",
			"\t);",
			"",
			"\treturn \\$schedules;",
			"}"
		],
		"description": "WordPress | Adds recurrence interval for Cron"
	}
}