{
	"WordPress | Force updates and upgrades": {
		"prefix": "wptupd",
		"body": [
			"defined('ABSPATH') or die('Bye bye!');",
			"add_filter('auto_update_core', '__return_true');",
			"add_filter('auto_update_plugin', '__return_true');",
			"add_filter('auto_update_theme', '__return_true');",
			"add_filter('auto_update_translation', '__return_true');",
			"add_filter('auto_core_update_send_email', '__return_true');"
		],
		"description": "WordPress | Force updates and upgrades"
	},
	"WordPress | Adds an action with function ": {
		"prefix": "wpaac",
		"body": [
			"add_action( '${1:action}', '${2:prefix}_${3:function}' );",
			"/**",
			" * ${4:function_description}",
			" *",
			" * @return void",
			" */",			    
			"function ${2:prefix}_${3:function}() {",
			"\t",
			"}"
		]
	},
	"WordPress | Shows the entry title with permalink": {
		"prefix": "wpstit",
		"body": [
		  "<h2 class=\"entry-title\">",
		  "\t<a href=\"<?php the_permalink(); ?>\" rel=\"bookmark\" title=\"<?php the_title_attribute();?>\"><?php the_title(); ?></a>",
		  "</h2>"
		]
	},
	"WordPress | Shows the entry title with permalink with echo": {
		"prefix": "wpstiv",
		"body": [
		  "echo '<h2 class=\"entry-title\">';",
		  "echo '<a href=\"' . esc_url( get_the_permalink() ) . '\" rel=\"bookmark\" title=\"' . the_title_attribute( 'echo=0' ) . '\">';",
		  "echo esc_html( get_the_title() );",
		  "echo '</a></h2>';"
		],
		"description": "WordPress | Shows title in php "
	},
	"WordPress | WordPress Add excerpts to Pages": {
		"prefix": "wpaex",
		"body": [
			"add_action( 'init', '${1:prefix}add_excerpts_to_pages' );",
			"/**",
			" * Adds excerpt to pages",
			" *",
			" * @return void",
			" */",
			"function ${1:prefix}add_excerpts_to_pages() {",
			"\tadd_post_type_support( 'page', 'excerpt' );",
			"}"
		],
		"description": "WordPress | WordPress Add excerpts to Pages"
	},
	"WordPress | Shows taxonomy terms of actual entry": {
		"prefix": "wpstrtax",
		"body": [
		  "//* Shows taxonomy",
		  "//Do something if a specific array value exists within a post",
		  "\\$term_list = wp_get_post_terms( get_the_id(), '${1:taxonomy}', array(\"fields\" => \"all\"));",
		  "\\$html = '<p class=\"taxonomy-${1:taxonomy}\">';",
		  "foreach(\\$term_list as \\$term_single) {",
		  "\t\\$html .= '<a href=\"'.get_term_link(\\$term_single).'\">'.\\$term_single->name.'</a>';",
		  "}",
		  "\\$html .= '</p>';",
		  "echo \\$html;"
		]
	},
	"WordPress | Shows a meta value": {
		"prefix": "wpsgmt",
		"body": [
		  "$${1:variable} = get_post_meta( get_the_id(), '${1:variable}', true );",
		  "if ( $${1:variable} ) {",
		  "\techo esc_html( $${1:variable} );",
		  "}// if meta ${1:variable} ."
		]
	},
	"WordPress | Creates a widget": {
		"prefix": "wpawid",
		"body": [
			"/*",
			"Widget Name: ${1:Widget Name}",
			"Description: ${2:Widget Description}.",
			"Author: davidperez",
			"Author URI: https://www.closemarketing.es",
			"*/",
			"function widget_${3:slug}() {",
			"\tregister_widget( 'widget_${3:slug}' );",
			"}",
			"add_action( 'widgets_init', 'widget_${3:slug}' );",
			"",
			"class widget_${3:slug} extends WP_Widget {",
			"",
			"\t// CONSTRUCT WIDGET",
			"\tfunction __construct() {",
			"\t\t\\$widget_ops = array(",
			"\t\t\t'classname'\t => 'widget_${3:slug}',",
			"\t\t\t'description' => '${2:Widget Description}',",
			"\t\t\t'panels_icon' => 'dashicons dashicons-layout',",
			"\t\t);",
			"\t\tparent::__construct( 'widget_${3:slug}', '${1:Widget Name}', \\$widget_ops );",
			"\t}",
			"",
			"\t// CREATE WIDGET FORM (WORDPRESS DASHBOARD)",
			"  function form(\\$instance) {",
			"\tglobal \\$wpdb;",
			"",
			"\t// Check values",
			"\tif(isset(\\$instance['title']) ) \\$title = apply_filters('widget_title', \\$instance['title']); else \\$title = '';",
			"\tif(isset(\\$instance['field_var']) ) \\$field_var = \\$instance['field_var']; else \\$field_var = '';",
			"\tif(isset(\\$instance['textarea_op']) ) \\$textarea_op = \\$instance['textarea_op']; else \\$textarea_op = '';",
			"\tif(isset(\\$instance['checkbox']) ) \\$checkbox = \\$instance['checkbox']; else \\$checkbox = '';",
			"\tif(isset(\\$instance['select_option']) ) \\$select_option = \\$instance['select_option']; else \\$select_option = '';",
			"\tif(isset(\\$instance['select_page']) ) \\$select_page = \\$instance['select_page']; else \\$select_page = '';",
			"\t?>",
			"",
			"\t<p>",
			"\t\t<label for=\"<?php echo \\$this->get_field_id('title'); ?>\"><?php _e('Widget Title', 'cmk'); ?></label>",
			"\t\t<input id=\"<?php echo \\$this->get_field_id('title'); ?>\" name=\"<?php echo \\$this->get_field_name('title'); ?>\" type=\"text\" value=\"<?php echo \\$title; ?>\" style=\"width:100%\"/>",
			"\t</p>",
			"",
			"\t<p>",
			"\t\t<label for=\"<?php echo \\$this->get_field_id('field_var'); ?>\"><?php _e('Text:', 'cmk'); ?></label>",
			"\t\t<input id=\"<?php echo \\$this->get_field_id('field_var'); ?>\" name=\"<?php echo \\$this->get_field_name('field_var'); ?>\" type=\"text\" value=\"<?php echo \\$field_var; ?>\"style=\"width:100%\"/>",
			"\t</p>",
			"",
			"\t<p>",
			"\t\t<label for=\"<?php echo \\$this->get_field_id('textarea_op'); ?>\"><?php _e('Textarea:', 'cmk'); ?></label>",
			"\t\t<textarea id=\"<?php echo \\$this->get_field_id('textarea_op'); ?>\" name=\"<?php echo \\$this->get_field_name('textarea_op'); ?>\" style=\"width:100%\"><?php echo \\$textarea_op; ?></textarea>",
			"\t</p>",
			"",
			"\t<p>",
			"\t\t<input id=\"<?php echo \\$this->get_field_id('checkbox'); ?>\" name=\"<?php echo \\$this->get_field_name('checkbox'); ?>\" type=\"checkbox\" value=\"1\" <?php checked( '1', \\$checkbox ); ?> />",
			"\t\t<label for=\"<?php echo \\$this->get_field_id('checkbox'); ?>\"><?php _e('Checkbox', 'cmk'); ?></label>",
			"\t</p>",
			"",
			"\t<p>",
			"\t<label for=\"<?php echo \\$this->get_field_id('select_option'); ?>\"><?php _e('Select', 'cmk'); ?></label>",
			"\t\t<select name=\"<?php echo \\$this->get_field_name('select_option'); ?>\" id=\"<?php echo \\$this->get_field_id('select_option'); ?>\" class=\"widefat\" style=\"width:100%\">",
			"\t\t<?php",
			"\t\t\\$options = array(",
			"\t\t\t\t\t\t'key1' => __('Value 1', 'cmk'), ",
			"\t\t\t\t\t\t'key2' => __('Value 2', 'cmk'), ",
			"\t\t\t\t\t\t'key3' => __('Value 3', 'cmk')",
			"\t\t\t);",
			"\t\tforeach (\\$options as \\$key => \\$option) {",
			"\t\techo '<option value=\"' . \\$key . '\" id=\"' . \\$key . '\"', \\$select_option == \\$key ? ' selected=\"selected\"' : '', '>', \\$option, '</option>';",
			"\t\t}",
			"\t\t?>",
			"\t\t</select>",
			"\t</p>",
			"  <?php",
			"  }",
			"",
			"  // UPDATE WIDGET",
			"\tfunction update( \\$new_instance, \\$old_instance ) {",
			"",
			"\t\t\\$instance = \\$old_instance;",
			"\t\t// Fields",
			"\t\t\\$instance['title'] = strip_tags(\\$new_instance['title']);",
			"\t\t\\$instance['field_var'] = strip_tags(\\$new_instance['field_var']);",
			"\t\t\\$instance['textarea_op'] = strip_tags(\\$new_instance['textarea_op']);",
			"\t\t\\$instance['checkbox'] = strip_tags(\\$new_instance['checkbox']);",
			"\t\t\\$instance['select_option'] = strip_tags(\\$new_instance['select_option']);",
			"\t\t\\$instance['select_page'] = strip_tags(\\$new_instance['select_page']);",
			"\t\treturn \\$instance;",
			"",
			"\t}",
			"",
			"\t// DISPLAY WIDGET ON FRONT END",
			"\tfunction widget( \\$args, \\$instance ) {",
			"",
			"\t\textract( \\$args );",
			"\t\t// Widget starts to print information",
			"\t\techo \\$before_widget;",
			"",
			"\t\tif(isset(\\$instance['title']) ) \\$title = apply_filters('widget_title', \\$instance['title']); else \\$title = '';",
			"\t\tif(isset(\\$instance['field_var']) ) \\$field_var = \\$instance['field_var']; else \\$field_var = '';",
			"\t\tif(isset(\\$instance['textarea_op']) ) \\$textarea_op = \\$instance['textarea_op']; else \\$textarea_op = '';",
			"\t\tif(isset(\\$instance['checkbox']) ) \\$checkbox = \\$instance['checkbox']; else \\$checkbox = '';",
			"\t\tif(isset(\\$instance['select_option']) ) \\$select_option = \\$instance['select_option']; else \\$select_option = '';",
			"\t\tif(isset(\\$instance['select_page']) ) \\$select_page = \\$instance['select_page']; else \\$select_page = '';",
			"\t\t?>",
			"",
			"\t\t<h3 class=\"widget-title\"><?php echo \\$title; ?></h3>",
			"",
			"\t\t<?php",
			"\t\t// Widget ends printing information",
			"\t\techo \\$after_widget;",
			"\t}",
			"",
			"} //class widget"
		]
	},
	"WordPress | Before Widget with Full Width wrapper": {
		"prefix": "wpawf",
		"body": [
		  "\\$before_widget = str_replace( 'class=\"', 'class=\"full-width ', \\$before_widget );"
		]
	},
	"WordPress | Shows Icons Social from Yoast": {
		"prefix": "wpssoc",
		"body": [
			"echo '<div class=\"social\">';",
			"\\$wpseo_social = get_option( 'wpseo_social' );",
			"if ( \\$wpseo_social['facebook_site'] ) {",
			"\techo '<a href=\"' . esc_url( \\$wpseo_social['facebook_site'] ) . '\" target=\"_blank\"><i class=\"icon icon-facebook\" rel=\"nofollow\"></i></a>';",
			"}",
			"if ( \\$wpseo_social['twitter_site'] ) {",
			"\techo '<a href=\"https://twitter.com/' . esc_url( \\$wpseo_social['twitter_site'] ) . '\" target=\"_blank\"><i class=\"icon icon-twitter\" rel=\"nofollow\"></i></a>';",
			"}",
			"if ( \\$wpseo_social['linkedin_url'] ) {",
			"\techo '<a href=\"' . esc_url( \\$wpseo_social['linkedin_url'] ) . '\" target=\"_blank\"><i class=\"icon icon-linkedin\" rel=\"nofollow\"></i></a>';",
			"}",
			"if ( \\$wpseo_social['instagram_url'] ) {",
			"\techo '<a href=\"' . esc_url( \\$wpseo_social['instagram_url'] ) . '\" target=\"_blank\"><i class=\"icon icon-instagram\" rel=\"nofollow\"></i></a>';",
			"}",
			"if ( \\$wpseo_social['youtube_url'] ) {",
			"\techo '<a href=\"' . esc_url( \\$wpseo_social['youtube_url'] ) . '\" target=\"_blank\"><i class=\"icon icon-youtube\" rel=\"nofollow\"></i></a>';",
			"}",
			"if ( \\$wpseo_social['pinterest_url'] ) {",
			"\techo '<a href=\"' . esc_url( \\$wpseo_social['pinterest_url'] ) . '\" target=\"_blank\"><i class=\"icon icon-pinterest\" rel=\"nofollow\"></i></a>';",
			"}",
			"echo '</div>';"
		]
	},
	"WordPress | Query Args for Date": {
		"prefix": "wpqda",
		"body": [
			"\\$args_query=array(",
			"\t'post_type'      => '${1:post_type}',",
			"\t'orderby'        => '${2:post_key}',",
			"\t'order'          => 'ASC',",
			"\t'posts_per_page' => 5,",
			"\t'meta_query'     => array(",
			"\t\tarray(",
			"\t\t\t'key'     => '${2:post_key}',",
			"\t\t\t'value'   => date(\"Y-m-d\"),",
			"\t\t\t'compare' => '>=',",
			"\t\t\t'type'    => 'date'",
			"\t\t\t)",
			"\t),",
			");"
		],
		"description": "WordPress | Query Args for Date"
	},
	"WordPress | Arguments for Query Meta value checkbox active": {
		"prefix": "wpqmc",
		"body": [
		  "// * Arguments for Query Meta value checkbox active",
		  "\\$args_query = array(",
		  "\t'post_type'      => '${1:post_type}',",
		  "\t'posts_per_page' => 10,",
		  "\t'orderby'        => '${2:order_by}', // menu_order, rand, date",
		  "\t'order'          => 'ASC',",
		  "\t'meta_query'     => array(",
		  "\t\tarray(",
		  "\t\t\t'key'     => '${3:meta_key}',",
		  "\t\t\t'value'   => '1',",
		  "\t\t),",
		  "\t),",
		  ");"
		],
		"description": "WordPress | Arguments for Query Meta value checkbox active"
	},
	"WordPress | Query entries with UL wrapper": {
		"prefix": "wpqul",
		"body": [
			"\\$args_query = array(",
			"\t'post_type'      => '${1:post_type}',",
			"\t'posts_per_page' => -1,",
			"\t'post_parent'    => 0,",
			"\t'orderby'        => 'title', // menu_order, rand, date",
			"\t'order'          => 'ASC',",
			");",
			"",
			"// The Query.",
			"\\$the_query = new WP_Query( \\$args_query );",
			"",
			"// The Loop.",
			"if ( \\$the_query->have_posts() ) {",
			"\techo '<ul class=\"wrap-${1:post_type}\">';",
			"\twhile ( \\$the_query->have_posts() ) {",
			"\t\t\\$the_query->the_post();",
			"\t\techo '<li class=\"item-${1:post_type}\">' . esc_html( get_the_title() ) . '</li>';",
			"\t}",
			"\techo '</ul>';",
			"\twp_reset_postdata();",
			"}"
		]
	},
	"WordPress | Query entries with DIV wrapper": {
		"prefix": "wpqdiv",
		"body": [
			"\\$args_query = array(",
			"\t'post_type'      => '${1:post_type}',",
			"\t'posts_per_page' => -1,",
			"\t'post_parent'    => 0,",
			"\t'orderby'        => '${2:menu_order}', // title, menu_order, rand, date.",
			"\t'order'          => 'ASC',",
			");",
			"",
			"// The Query.",
			"\\$the_query = new WP_Query( \\$args_query );",
			"",
			"// The Loop.",
			"if ( \\$the_query->have_posts() ) {",
			"\techo '<div class=\"wrap-${1:post_type}\">';",
			"\twhile ( \\$the_query->have_posts() ) {",
			"\t\t\\$the_query->the_post();",
			"\t\techo '<div class=\"item-${1:post_type}\">' . esc_html( get_the_title() ) . '</div>';",
			"\t}",
			"\techo '</div>';",
			"\twp_reset_postdata();",
			"}"
		]
	},
	"WordPress | Query entries from a taxonomy": {
		"prefix": "wpqta",
		"body": [
		  "\\$args_query=array(",
		  "\t'post_type'      => '${1:post_type}',",
		  "\t'orderby'        => '${2:post_key}', // title, menu_order, rand, date",
		  "\t'order'          => 'ASC', ",
		  "\t'posts_per_page' => 5,",
		  "\t'tax_query'      => array(",
		  "\t\tarray(",
		  "\t\t\t'taxonomy' => '${3:tax_name}',",
		  "\t\t\t'field'    => 'slug',",
		  "\t\t\t'terms'    => '${4:tax_slug}',",
		  "\t\t),",
		  "\t),",
		  ");"
		]
	},
	"WordPress | Query Terms from a taxonomy": {
		"prefix": "wpqtm",
		"body": [
		  "\\$terms_${1:post-type} = get_terms( '${1:post-type}', array(",
		  "\t'orderby'    => 'name',",
		  "\t'order'      => 'ASC',",
		  "\t'hide_empty' => false,",
		  "));",
		  "if ( ! empty( \\$terms_${1:post-type} ) && ! is_wp_error( \\$terms_${1:post-type} ) ){",
		  "\techo '<ul class=\"list-terms terms-${1:post-type}\">';",
		  "\tforeach ( \\$terms_${1:post-type} as \\$term_${1:post-type}) {",
		  "\t\techo '<li class=\"term\"><a href=\"'.get_term_link(\\$term_${1:post-type}->term_id,'${1:post-type}').'\">' . \\$term_${1:post-type}->name . '</a></li>';",
		  "\t}",
		  "\techo '</ul>';",
		  "}"
		]
	},
	"WordPress | Query Terms from actual post": {
		"prefix": "wpqtmp",
		"body": [
			"\\$term_list = wp_get_post_terms(",
			"\tget_the_ID(),",
			"\t'${1:tax-name}',",
			"\tarray(",
			"\t\t'fields' => 'all'",
			"\t)",
			");",
			"foreach ( \\$term_list as \\$term_single ) {",
			"\techo esc_html( \\$term_single->name );",
			"}"
		]
	},

	"WordPress | Show Tabs": {
		"prefix": "wpstab",
		"body": [
			"//* In functions",
			"//* Enqueue tab js including jQuery UI Tabs",
			"add_action( 'wp_enqueue_scripts', '${1:prefix}_load_tab_script' );",
			"function ${1:prefix}_load_tab_script() {",
			"\twp_enqueue_script('${1:prefix}-tabs', get_stylesheet_directory_uri() . '/js/tabs.js', array('jquery-ui-tabs'), '1.0.0', true);",
			"}",
			"",
			"//* Create file /js/tabs.js",
			"/*",
			"jQuery(function( $ ){",
			"// #tsm-tab-wrap is the id of the div that wraps ALL of out tab markup",
			" \t$(\".${1:prefix}-tab-wrap\").tabs();",
			"});",
			"*/",
			"",
			"//* In style.css",
			"/* Tabs content",
			"---------------------------------------------------------------------------------------------------- */",
			"",
			".entry-content ul.cmk-tabs {",
			"margin-left: 0;",
			"margin-bottom: 0;",
			"}",
			".${1:prefix}-tabs {",
			"\tmargin: 0 0 -2px 0;",
			"\toverflow: hidden;",
			"}",
			"",
			".${1:prefix}-tabs li {",
			"\tdisplay: inline-block;",
			"\tmargin: 0 4px 0 0;",
			"}",
			"",
			".${1:prefix}-tabs li a {",
			"\tdisplay: block;",
			"\tbackground: #f0f0f0;",
			"\tcolor: #555;",
			"\tfont-weight: 700;",
			"\tpadding: 10px 30px;",
			"\tborder: #eee solid 2px;",
			"\tborder-bottom: 0 none;",
			"\tborder-radius: 5px 5px 0 0;",
			"\ttext-decoration: none;",
			"\toutline: none;",
			"}",
			"",
			".${1:prefix}-tabs li a:hover {",
			"\tcolor: #888;",
			"}",
			"",
			".${1:prefix}-tabs li.ui-tabs-active a {",
			"\tbackground: #fff;",
			"\tpadding-bottom: 12px;",
			"\tmargin-bottom: -2px;",
			"}",
			"",
			".${1:prefix}-tabs li.ui-tabs-active a:hover {",
			"\tcolor: #555; /*this counteracts the tab color hover*/",
			"}",
			"",
			".${1:prefix}-tab-content {",
			"\tpadding: 20px;",
			"\tborder: 2px solid #eee;",
			"\toverflow: hidden;",
			"}",
			"",
			"//* Tabs",
			"<div class=\"${1:prefix}-tab-wrap\">",
			"\t<!-- Tab links -->",
			"\t<ul class=\"${1:prefix}-tabs\">",
			"\t\t<li><a href=\"#tab_1\">Title 1</a></li>",
			"\t\t<li><a href=\"#tab_2\">Title 2</a></li>",
			"\t</ul>",
			"",
			"\t<div class=\"${1:prefix}-tab-content\">",
			"\t\t<!-- Tab content - id must match the href from the tab link -->",
			"\t\t<div id=\"tab_1\">",
			"\t\t",
			"\t\t</div>",
			"\t\t<div id=\"tab_2\">",
			"",
			"\t\t</div>",
			"",
			"\t</div>",
			"</div>",
			""
		]
	},
	"WordPress | Change arguments of registered post type": {
		"prefix": "wptarg",
		"body": [
			"/**",
			" * Change arguments of registered post type",
			" *",
			" * @param array  $args Arguments of registered post type.",
			" * @param string $post_type Post type slug.",
			" * @return array $args",
			" */",
			"function cmk_custom_post_type_args( $args, $post_type ) {",
			"\tif ( '${1:post-type-slug}' === $post_type ) {",
			"\t\t$args['${2:args-slug}'] = ${2:value};",
			"\t}",
			"\treturn $args;",
			"}",
			"add_filter( 'register_post_type_args', 'cmk_custom_post_type_args', 20, 2 );"
		]
	    }
}