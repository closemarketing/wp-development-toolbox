{
	"Posts 2 Posts  | Register Connections": {
		"prefix": "p2pacon",
		"body": [
			"add_action( 'p2p_init', '${0:prefix}_connection_types' );",
			"/**",
			" * Register Connections with P2P ${1:post_type_1} and ${2:post_type_2}",
			" *",
			" * @return void",
			" */",
			"function ${0:prefix}_connection_types() {",
			"\tp2p_register_connection_type(",
			"\t\tarray(",
			"\t\t\t'name'  => '${1:post_type_1}_to_${2:post_type_2}',",
			"\t\t\t'from'  => '${1:post_type_1}',",
			"\t\t\t'to'    => '${2:post_type_2}',",
			"\t\t\t'title' => 'ConexiÃ³n ${1:post_type_1} - ${2:post_type_2}'",
			"\t\t)",
			"\t);",
			"}"
		]
	},
	"Posts 2 Posts  | Shows connected posts": {
		"prefix": "p2pscon",
		"body": [
			"\t// * Find connected pages from the plugin https://es.wordpress.org/plugins/posts-to-posts/",
			"\t\\$connected = new WP_Query(",
			"\t\tarray(",
			"\t\t\t'connected_type'  => '${1:post_type_1}_to_${2:post_type_2}',",
			"\t\t\t'connected_items' => get_queried_object(),",
			"\t\t\t'nopaging'        => true,",
			"\t\t)",
			"\t);",
			"",
			"\t// Display connected pages.",
			"\tif ( \\$connected->have_posts() ) {",
			"\t\techo '<h3>Related pages:</h3>';",
			"\t\techo '<ul>';",
			"\t\twhile ( \\$connected->have_posts() ) {",
			"\t\t\t\\$connected->the_post();",
			"\t\t\techo '<li><a href=\"' . esc_url( get_the_permalink() ) . '\">' . esc_html( get_the_title() ) . '</a></li>';",
			"\t\t}",
			"\t\techo '</ul>';",
			"\t\twp_reset_postdata();",
			"\t}"
		]
	},
	"GravityForms | Enable Visibility": {
		"prefix": "gfavib",
		"body": [
			"//* Enable Field visibility",
			"add_filter( 'gform_enable_field_label_visibility_settings', '__return_true' );"
		],
		"description": "GravityForms | Enable Visibility"
	},
	"GravityForms | Shows form": {
		"prefix": "gfsform",
		"body": [
			"//* Adds gravity form",
			"gravity_form( ${1:id}, ${2:display-title-boolean}, ${3:display-description-boolean});"
		],
		"description": "GravityForms | Shows form"
	},
	"Search Filter Pro | Results Page": {
		"prefix": "sfsres",
		"body": [
			"if ( \\$query->have_posts() ) {",
			"\t?>",
			"\t<div class=\"item header-item\">",
			"\t\t<div class=\"one-third first\"></div>",
			"\t\t<div class=\"one-third\"></div>",
			"\t\t<div class=\"one-third\"></div>",
			"\t</div>",
			"\t<?php while ( \\$query->have_posts() ) {",
			"\t\t\\$query->the_post();",
			"",
			"\t\t?>",
			"\t\t<div class=\"item\">",
			"\t\t\t<div class=\"one-third first\">",
			"\t\t\t\t<a href=\"<?php the_permalink();?>\" rel=\"bookmark\" title=\"<?php echo the_title_attribute(); ?>\"><?php the_title();?></a>",
			"\t\t\t</div>",
			"\t\t\t<div class=\"one-third\">",
			"",
			"\t\t\t</div>",
			"\t\t\t<div class=\"one-third\">",
			"\t\t\t</div>",
			"\t\t</div>",
			"\t\t<?php",
			"\t\t}",
			"\t\t?>",
			"\t<div class=\"pagination search clearfix\">",
			"\t\t<div class=\"nav-previous\"><?php next_posts_link( '<< ${1:older-text}', \\$query->max_num_pages ); ?></div>",
			"\t\t<div class=\"nav-next\"><?php previous_posts_link( '${2:newer-text} >>' ); ?></div>",
			"\t</div>",
			"\t<?php",
			"}"
		],
		"description": "Search Filter Pro | Results Page"
	},
	"revrmet": {
		"prefix": "Revolution Slider | Remove metabox in all post types",
		"body": [
			"if ( is_admin() ) {",
			"\t/**",
			"\t * Remove Revolution slider metabox",
			"\t *",
			"\t * @return void",
			"\t */",
			"\tfunction remove_revolution_slider_meta_boxes() {",
			"\t\t$post_types = get_post_types();",
			"\t\tforeach ( $post_types as $post_type ) {",
			"\t\t\tif ( 'page' !== $post_type && 'post' !== $post_type ) {",
			"\t\t\t\tremove_meta_box( 'mymetabox_revslider_0', $post_type, 'normal' );",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tadd_action( 'do_meta_boxes', 'remove_revolution_slider_meta_boxes' );",
			"}"
		],
		"description": "revrmet"
	}
}