{
	"WooCommerce | Creates new status for Orders": {
		"prefix": "wootord",
		"body": [
			"/** ",
			" * Register new status",
			" * Tutorial: http://www.sellwithwp.com/woocommerce-custom-order-status-2/",
			"**/",
			"add_action( 'init', 'cmk_register_awaiting_shipment_order_status' );",
			"add_filter( 'wc_order_statuses', 'cmk_add_awaiting_shipment' );",
			"function cmk_register_awaiting_shipment_order_status() {",
			"",
			"\tregister_post_status( 'wc-sent', array(",
			"\t\t'label'\t\t\t\t\t => 'Enviado',",
			"\t\t'public'\t\t\t\t\t=> true,",
			"\t\t'exclude_from_search'\t   => false,",
			"\t\t'show_in_admin_all_list'\t=> true,",
			"\t\t'show_in_admin_status_list' => true,",
			"\t\t'label_count'\t\t\t   => _n_noop( 'Enviado <span class=\"count\">(%s)</span>', ",
			"\t\t\t'Enviados <span class=\"count\">(%s)</span>' )",
			"\t) );",
			"}",
			"",
			"// Add to list of WC Order statuses",
			"function cmk_add_awaiting_shipment( \\$order_statuses ) {",
			"",
			"\t\\$new_order_statuses = array();",
			"",
			"\t// add new order status after processing",
			"\tforeach ( \\$order_statuses as \\$key => \\$status ) {",
			"",
			"\t\t\\$new_order_statuses[ \\$key ] = \\$status;",
			"",
			"\t\tif ( 'wc-processing' === \\$key ) {",
			"\t\t\t\\$new_order_statuses['wc-sent'] = 'Enviado';",
			"\t\t}",
			"\t}",
			"",
			"\treturn \\$new_order_statuses;",
			"}"
		]
	},
	"WooCommerce | Trim Zeros in Price": {
		"prefix": "wootzero",
		"body": [
		  "// Trim zeros in price decimals.",
		  "add_filter( 'woocommerce_price_trim_zeros', '__return_true' );"
		],
		"description": "WooCommerce | Trim Zeros in Price"
	},
	"WooCommerce | Sets Products per page": {
		"prefix": "wootpprod",
		"body": [
		  "add_filter( 'loop_shop_per_page', '${1:prefix}_loop_shop_per_page', 20 );",
		  "/**",
		  " * Change number of products that are displayed per page (shop page)",
		  " *",
		  " * @param number \\$cols Products per loop.",
		  " * @return number \\$cols",
		  " */",
		  "function ${1:prefix}_loop_shop_per_page( \\$cols ) {",
		  "\t// $cols contains the current number of products per page based on the value stored on Options -> Reading",
		  "\t// Return the number of products you wanna show per page.",
		  "\t\\$cols = ${2:num_prod};",
		  "\treturn \\$cols;",
		  "}"
		],
		"description": "WooCommerce | Sets Products per page"
	},
	"WooCommerce | Remove Badge in products": {
		"prefix": "woorbad",
		"body": [
		  "// * Remove Sales Flash.",
		  "add_filter( 'woocommerce_sale_flash', function() {",
		  "\treturn false;",
		  "} );"
		],
		"description": "WooCommerce | Remove Badge in products"
	},
	"WooCommerce | Remove product thumbnails in archive pages": {
		"prefix": "woorarimg",
		"body": [
		  "// * Remove Woocommerce thumbnails in archive pages",
		  "remove_action( 'woocommerce_before_shop_loop_item_title', 'woocommerce_template_loop_product_thumbnail', 10 );"
		],
		"description": "WooCommerce | Remove product thumbnails in archive pages"
	},
	"WooCommerce | Removes stock text in Product page": {
		"prefix": "woorsto",
		"body": [
		  "// * Woocommerce removes stock html.",
		  "add_filter( 'woocommerce_get_stock_html', '__return_empty_string' );"
		],
		"description": "WooCommerce | Removes stock text in Product page"
	},
	"WooCommerce | Removes Product Tag": {
		"prefix": "woorptag",
		"body": [
			"/**",
			" * Overwrite product_tag taxonomy properties to effectively hide it from WP admin ..",
			" */",
			"add_action( 'init', function() {",
			"\tregister_taxonomy('product_tag', 'product', [",
			"\t\t'public'            => false,",
			"\t\t'show_ui'           => false,",
			"\t\t'show_admin_column' => false,",
			"\t\t'show_in_nav_menus' => false,",
			"\t\t'show_tagcloud'     => false,",
			"\t]);",
			"}, 100 );",
			"",
			"/**",
			" * .. and also remove the column from Products table - it's also hardcoded there.",
			" */",
			"add_action( 'admin_init', function() {",
			"\tadd_filter('manage_product_posts_columns', function( $columns ) {",
			"\t\tunset( $columns['product_tag'] );",
			"\t\treturn $columns;",
			"\t}, 100);",
			"});"
		],
		"description": "WooCommerce | Removes Product Tag"
	},
	"WooCommerce | Removes SKU in detail page": {
		"prefix": "woorsku",
		"body": [
			"add_filter( 'wc_product_sku_enabled', '${1:prefix}remove_product_page_skus' );",
			"/**",
			" * Removes SKU in detail page.",
			" *",
			" * @param boolean \\$enabled Value to SKU enabled or not.",
			" * @return boolean \\$enabled",
			" */",
			"function ${1:prefix}remove_product_page_skus( \\$enabled ) {",
			"\tif ( ! is_admin() && is_product() ) {",
			"\t\treturn false;",
			"\t}",
			"\treturn \\$enabled;",
			"}"
		]
	},
	"WooCommerce | Remove Company name in checkout": {
		"prefix": "woorcomp",
		"body": [
			"/**",
			" * Removes Company Name in Checkout.",
			" *",
			" * @param array \\$fields Fiels of checkout in WooCommerce.",
			" * @return array \\$fields",
			" */",
			"function custom_override_checkout_fields( \\$fields ) {",
			"\tunset(\\$fields['billing']['billing_company']);",
			"\treturn \\$fields;",
			"}",
			"add_filter( 'woocommerce_checkout_fields', 'custom_override_checkout_fields' );"
		]
	},
	"WooCommerce | Remove Showing results": {
		"prefix": "woors",
		"body": [
			"// Removes showing results.",
			"remove_action( 'woocommerce_before_shop_loop', 'woocommerce_result_count', 20 );"
		],
		"description": "WooCommerce | Remove Showing results"
	},
	"WooCommerce | Remove Sorting dropdown": {
		"prefix": "woord",
		"body": [
		  "// WooCommerce Remove default sorting dropdown.",
		  "remove_action( 'woocommerce_before_shop_loop', 'woocommerce_catalog_ordering', 30 );"
		],
		"description": "WooCommerce | Remove Sorting dropdown"
	    },
	"WooCommerce | Remove Count subcategories": {
		"prefix": "woorco",
		"body": [
			"add_filter( 'woocommerce_subcategory_count_html', '${1:prefix}_hide_category_count' );",
			"/**",
			" * Remove Count Subcategories",
			" *",
			" * @return void",
			" */",
			"function ${1:prefix}_hide_category_count() {",
			"\t// No count",
			"}"
		],
		"description": "WooCommerce | Remove Count subcategories"
	},
	"WooCommerce | Removes Description tab title": {
		"prefix": "woordes",
		"body": [
			"// Removes Description tab title.",
			"add_filter( 'woocommerce_product_description_heading', '__return_null' );"
		],
		"description": "WooCommerce | Removes Description tab title"
	},
	"WooCommerce | Remove add to cart in loop": {
		"prefix": "woorcart",
		"body": [
			"// * Remove add to cart in loop.",
			"remove_action( 'woocommerce_after_shop_loop_item', 'woocommerce_template_loop_add_to_cart' );"
		],
		"description": "WooCommerce | Remove add to cart in loop"
	},
	"WooCommerce | Hide Shipping rates when free shipping": {
		"prefix": "woorfree",
		"body": [
			"add_filter( 'woocommerce_package_rates', '${1:prefix}_hide_shipping_when_free_is_available', 100 );",
			"/**",
			" * Hide shipping rates when free shipping is available.",
			" * Updated to support WooCommerce 2.6 Shipping Zones.",
			" *",
			" * @param array $rates Array of rates found for the package.",
			" * @return array",
			" */",
			"function ${1:prefix}_hide_shipping_when_free_is_available( \\$rates ) {",
			"\t\\$free = array();",
			"\tforeach ( \\$rates as \\$rate_id => \\$rate ) {",
			"\t\tif ( 'free_shipping' === \\$rate->method_id ) {",
			"\t\t\t\\$free[ \\$rate_id ] = \\$rate;",
			"\t\t\tbreak;",
			"\t\t}",
			"\t}",
			"\treturn ! empty( \\$free ) ? \\$free : \\$rates;",
			"}"
		],
		"description": "WooCommerce | Hide Shipping rates when free shipping"
	},
	"WooCommerce | Remove Price Range in product page": {
		"prefix": "woorpr",
		"body": [
		  "add_filter( 'woocommerce_variable_sale_price_html', '${1:prefix}variable_product_price', 10, 2 );",
		  "add_filter( 'woocommerce_variable_price_html', '${1:prefix}variable_product_price', 10, 2 );",
		  "/**",
		  " * Hide Price Range for WooCommerce Variable Products.",
		  " * From: https://learnwoo.com/hide-price-range-woocommerce-variable-products/",
		  " *",
		  " * @param array  \\$v_price Array of prices.",
		  " * @param object \\$v_product Product object.",
		  " * @return string",
		  " */",
		  "function ${1:prefix}variable_product_price( \\$v_price, \\$v_product ) {",
		  "",
		  "\t// Product Price.",
		  "\t\\$prod_prices = array( \\$v_product->get_variation_price( 'min', true ), \\$v_product->get_variation_price( 'max', true ) );",
		  "\t\\$prod_price  = \\$prod_prices[0] !== \\$prod_prices[1] ? sprintf( __( 'From: %1$s', 'woocommerce' ), wc_price( \\$prod_prices[0] ) ) : wc_price( \\$prod_prices[0] );",
		  "",
		  "\t// Regular Price.",
		  "\t\\$regular_prices = array( \\$v_product->get_variation_regular_price( 'min', true ), \\$v_product->get_variation_regular_price( 'max', true ) );",
		  "\tsort( \\$regular_prices );",
		  "\t\\$regular_price = \\$regular_prices[0]!== \\$regular_prices[1] ? sprintf( __( 'From: %1$s', 'woocommerce' ), wc_price( \\$regular_prices[0] ) ) : wc_price( \\$regular_prices[0] );",
		  "",
		  "\tif ( \\$prod_price !== \\$regular_price ) {",
		  "\t\t\\$prod_price = '<del>' . \\$regular_price . \\$v_product->get_price_suffix() . '</del> <ins>' . \\$prod_price . \\$v_product->get_price_suffix() . '</ins>';",
		  "\t}",
		  "\treturn \\$prod_price;",
		  "}",
		  ""
		],
		"description": "WooCommerce | Remove Price Range in product page"
	},
	"WooCommerce | Add Settings Tab": {
		"prefix": "wooastb",
		"body": [
			"/**",
			" * Class for admin fields",
			" */",
			"class ${1:class-name} {",
			"",
			"\t/**",
			"\t * Construct of Class",
			"\t */",
			"\tpublic function __construct() {",
			"\t\t// Settings.",
			"\t\tadd_filter( 'woocommerce_settings_tabs_array', array( $this, 'menu_tab' ), 50 );",
			"\t\tadd_action( 'woocommerce_settings_tabs_${2:settings-slug}', array( $this, 'settings_tab' ) );",
			"\t\tadd_action( 'woocommerce_update_options_${2:settings-slug}', array( $this, 'update_settings' ) );",
			"\t}",
			"",
			"\t/*",
			"\t* Add a custom tab in the WooCommerce settings.",
			"\t*",
			"\t* @since 1.0.0",
			"\t* @return array $tabs Used to add a tab to the WooCommerce settings page.",
			"\t*/",
			"\tpublic function menu_tab( $tabs ) {",
			"\t\t// Add our own section.",
			"\t\t$tabs['${2:settings-slug}'] = '${3:tab-name}';",
			"\t\treturn $tabs;",
			"\t}",
			"",
			"\t/**",
			"\t * Function to add our settings to the new tab.",
			"\t *",
			"\t * @since 1.0.0",
			"\t * @return array Multiple arrays holding our section information",
			"\t */",
			"",
			"\tpublic function settings_tab() {",
			"\t\twoocommerce_admin_fields( $this->get_settings() );",
			"\t}",
			"",
			"",
			"\t/**",
			"\t * Update settings.",
			"\t *",
			"\t * @since 1.0.0",
			"\t */",
			"\tpublic function update_settings() {",
			"\t\twoocommerce_update_options( $this->get_settings() );",
			"\t}",
			"",
			"\t/**",
			"\t * Helper function to hold an array of our settings.",
			"\t *",
			"\t * @since 1.0.0",
			"\t * @return array $settings Array of our settings.",
			"\t */",
			"\tpublic function get_settings() {",
			"\t\t$settings = array(",
			"\t\t\t'${2:settings-slug}_section_title' => array(",
			"\t\t\t\t'name' => '',",
			"\t\t\t\t'type' => 'title',",
			"\t\t\t\t'desc' => '',",
			"\t\t\t\t'id'   => '${2:settings-slug}_section_title',",
			"\t\t\t),",
			"\t\t\t'${2:settings-slug}_checkbox' => array(",
			"\t\t\t\t'name' => '',",
			"\t\t\t\t'type' => 'checkbox',",
			"\t\t\t\t'css'  => 'min-width:300px;',",
			"\t\t\t\t'desc' => '',",
			"\t\t\t\t'id'   => '${2:settings-slug}_split_order',",
			"\t\t\t),",
			"\t\t\t'section_end' => array(",
			"\t\t\t\t'type' => 'sectionend',",
			"\t\t\t\t'id'   => '${2:settings-slug}_section_end',",
			"\t\t\t),",
			"\t\t);",
			"",
			"\t\treturn $settings;",
			"\t}",
			"}",
			"",
			"global $woo_settings_tab_new;",
			"$woo_settings_tab_new = new ${1:class-name}();"
		],
		"description": "WooCommerce | Add Settings Tab"
	},
	"WooCommerce | Add Column in My Account page": {
		"prefix": "wooacmy",
		"body": [
			"add_filter( 'woocommerce_my_account_my_orders_columns', '${1:prefix}_wc_add_my_account_orders_column' );",
			"/**",
			" * Adds a new column to the \"My Orders\" table in the account.",
			" *",
			" * @param string[] $columns the columns in the orders table",
			" * @return string[] updated columns",
			" */",
			"function ${1:prefix}_wc_add_my_account_orders_column( \\$columns ) {",
			"",
			"\t\\$new_columns = array();",
			"\tforeach ( \\$columns as \\$key => \\$name ) {",
			"\t\t\\$new_columns[ \\$key ] = \\$name;",
			"\t",
			"\t\t// add ship-to after order status column",
			"\t\tif ( 'order-status' === \\$key ) {",
			"\t\t\\$new_columns['${2:column_slug}'] = __( '${3:column_title}', 'textdomain' );",
			"\t\t}",
			"\t}",
			"",
			"\treturn \\$new_columns;",
			"}",
			"",
			"",
			"add_action( 'woocommerce_my_account_my_orders_column_${2:column_slug}', '${1:prefix}_wc_my_${2:column_slug}_column' );",
			"/**",
			" * Adds data to the custom \"ship to\" column in \"My Account > Orders\".",
			" *",
			" * @param \\WC_Order \\$order the order object for the row",
			" */",
			"function ${1:prefix}_wc_my_${2:column_slug}_column( $order ) {",
			"\techo '';",
			"}"
		],
		"description": "WooCommerce | Add Column in My Account page"
	},
	"WooCommerce | Adds Custom Styles for Emails": {
		"prefix": "wootems",
		"body": [
			"add_action( 'woocommerce_email_header', 'add_css_to_email' );",
			"/**",
			" * Email custom style",
			" *",
			" * @return void",
			" */",
			"function add_css_to_email() {",
			"\techo '",
			"\t<style type=\"text/css\">",
			"\t\tbody {",
			"\t\t\tbackground-color: black;",
			"\t\t}",
			"\t\t#template_container {",
			"\t\t\tbackground-color: white;",
			"\t\t}",
			"\t\t#header_wrapper {",
			"\t\t\tpadding-bottom: 10px;",
			"\t\t}",
			"\t\th1,a {",
			"\t\t\tcolor: #33c0c7 !important;",
			"\t\t\ttext-shadow: none;",
			"\t\t}",
			"\t</style>",
			"\t';",
			"}"
		],
		"description": "WooCommerce | Adds Custom Styles for Emails"
	},
	"WooCommerce | Hide prices in archive pages": {
		"prefix": "woorpa",
		"body": [
		  "add_filter( 'woocommerce_get_price_html', '${1:prefix}_hide_prices_archive', 10, 2 );",
		  "/**",
		  " * Hide prices in archive pages",
		  " *",
		  " * @param  string \\$price Price of product.",
		  " * @param  string \\$product Product ID.",
		  " * @return string \\$price",
		  " */",
		  "function ${1:prefix}_hide_prices_archive( \\$price, \\$product ) {",
		  "\tif ( is_shop() || is_product_category() ) {",
		  "\t\treturn ''; // Empty string = no price!",
		  "\t}",
		  "",
		  "\treturn \\$price;",
		  "}"
		],
		"description": "WooCommerce | Hide prices in archive pages"
	},
	"WooCommerce | Remove Image in Single product": {
		"prefix": "wooris",
		"body": [
		  "// Remove Image in Single product.",
		  "remove_action( 'woocommerce_before_single_product_summary', 'woocommerce_show_product_images', 20 );"
		],
		"description": "WooCommerce | Remove Image in Single product"
	},
	"WooCommerce | Adds checkbox for terms and conditions in registration page": {
		"prefix": "woosterm",
		"body": [
		  "// * Code snippet from https://stackoverflow.com/questions/49311826/add-a-terms-and-conditions-checkbox-in-woocommerce-registration-form",
		  "add_action( 'woocommerce_register_form', 'add_terms_and_conditions_to_registration', 20 );",
		  "/**",
		  " * Add terms and conditions in registration page",
		  " *",
		  " * @return void",
		  " */",
		  "function add_terms_and_conditions_to_registration() {",
		  "",
		  "\tif ( wc_get_page_id( 'terms' ) > 0 && is_account_page() ) {",
		  "\t\t?>",
		  "\t\t<p class=\"form-row terms wc-terms-and-conditions\">",
		  "\t\t\t<label class=\"woocommerce-form__label woocommerce-form__label-for-checkbox checkbox\">",
		  "\t\t\t<input type=\"checkbox\" class=\"woocommerce-form__input woocommerce-form__input-checkbox input-checkbox\" name=\"terms\" <?php checked( apply_filters( 'woocommerce_terms_is_checked_default', isset( \\$_POST['terms'] ) ), true ); ?> id=\"terms\" /> <span><?php printf( __( 'He leído y acepto <a href=\"%s\" target=\"_blank\" class=\"woocommerce-terms-and-conditions-link\">los términos y condiciones de venta</a>', 'woocommerce' ), esc_url( wc_get_page_permalink( 'terms' ) ) ); ?></span> <span class=\"required\">*</span>",
		  "\t\t\t</label>",
		  "\t\t\t<input type=\"hidden\" name=\"terms-field\" value=\"1\" />",
		  "\t\t</p>",
		  "\t\t<?php",
		  "\t}",
		  "}",
		  "",
		  "add_action( 'woocommerce_register_post', 'terms_and_conditions_validation', 20, 3 );",
		  "/**",
		  " * Validate required term and conditions check box",
		  " *",
		  " * @param string \\$username Username.",
		  " * @param string \\$email Email.",
		  " * @param object \\$validation_errors Object of validation errors.",
		  " * @return object \\$validation_errors",
		  " */",
		  "function terms_and_conditions_validation( \\$username, \\$email, \\$validation_errors ) {",
		  "\tif ( ! isset( \\$_POST['terms'] ) ) {",
		  "\t\t\\$validation_errors->add( 'terms_error', __( '¡No has marcado los términos y condiciones!', 'woocommerce' ) );",
		  "\t}",
		  "",
		  "\treturn \\$validation_errors;",
		  "}",
		  ""
		],
		"description": "WooCommerce | Adds checkbox for terms and conditions"
	},
	"WooCommerce | Remove mandatory phone in checkout": {
		"prefix": "woormp",
		"body": [
		  "add_filter( 'woocommerce_billing_fields', '${1:prefix}remove_filter_phone', 10, 1 );",
		  "/**",
		  " * Remove mandatory phone",
		  " *",
		  " * @param array \\$address_fields Address Fields from Checkout.",
		  " * @return array \\$address_fields",
		  " */",
		  "function ${1:prefix}remove_filter_phone( \\$address_fields ) {",
		  "	\\$address_fields['billing_phone']['required'] = false;",
		  "	return \\$address_fields;",
		  "}"
		],
		"description": "WooCommerce | Remove mandatory phone in checkout"
	},
	"WooCommerce | Remove Product Tabs": {
		"prefix": "woorpb",
		"body": [
		  "// * Removes WooCommerce Product Tabs",
		  "// * https://en.davidperezgar.com/blog/web-development/remove-product-tabs-woocommerce/?utm_source=vscode",
		  "// *  Location: add to functions.php",
		  "// *  Output: removes woocommerce tabs",
		  "remove_action( 'woocommerce_after_single_product_summary', 'woocommerce_output_product_data_tabs', 10 );"
		],
		"description": "WooCommerce | Remove Product Tabs"
	}
}